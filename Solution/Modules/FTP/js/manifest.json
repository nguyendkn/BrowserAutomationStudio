{
    "actions": [
        {
            "code": [
                {
                    "file": "FTP_Config_code.js",
                    "name": "FTP_Config_code"
                }
            ],
            "description": {
                "en": "Configure",
                "ru": "Настроить"
            },
            "interface": "FTP_Config_interface.js",
            "is_element": false,
            "name": "FTP_Config",
            "select": "FTP_Config_select.js",
            "template": "{{Host}}"
        },
		{
            "code": [
                {
                    "file": "FTP_Download_code.js",
                    "name": "FTP_Download_code"
                }
            ],
            "description": {
                "en": "Download file/folder",
                "ru": "Скачать файл/папку"
            },
            "interface": "FTP_Download_interface.js",
            "is_element": false,
            "name": "FTP_Download",
            "select": "FTP_Download_select.js",
            "template": "{{RemotePath}} -> {{DestinationPath}}"
        }
    ],
    "api_version": 1,
    "autogenerated_functions": [
        "FTP_Config",
        "FTP_Download"
    ],
    "browser": [
    ],
    "depends": [
    ],
    "description": "Working with remote servers",
    "description_small": {
        "en": "FTP/SSH",
        "ru": "FTP/SSH"
    },
    "developer_email": "sasha9817@mail.ru",
    "developer_name": "GhostZ",
    "developer_site": "https://t.me/GhostZed",
    "embeddeddata": [
        {
            "Data": "const Client = require('ftp');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_DOWNLOAD_PARAMETERS]][0];\r\nvar destination_path = [[FTP_DOWNLOAD_PARAMETERS]][1];\r\nvar config = [[FTP_DOWNLOAD_PARAMETERS]][2];\r\nvar split = remote_path.split(\"/\")\r\nvar remote_name = split.pop();\r\nvar remote_directory = split.join(\"/\");\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function() {\r\n        client.list(remote_directory, function(err, list){\r\n            if(err){\r\n                reject(err);\r\n            }else{\r\n                var file = list.filter(function(file){return decodeName(file[\"name\"])==remote_name})[0]\r\n                var fileName = decodeName(file[\"name\"]);\r\n                var fileType = file[\"type\"];\r\n                var destinationFullPath = destination_path + \"/\" + fileName;\r\n                if(fileType==\"d\"){\r\n                    downloadFolder(remote_path, destinationFullPath);\r\n                    client.end();\r\n                }else{\r\n                    client.get(remote_path, function(err, stream) {\r\n                        if(err){\r\n                            reject(err);\r\n                        }else{\r\n                            var writeStream = stream.pipe(fs.createWriteStream(destinationFullPath));\r\n                            writeStream.on('error', function(err){\r\n                                reject(err);\r\n                            });\r\n                            writeStream.once('close', function close(){\r\n                                client.end();\r\n                            });\r\n                        };\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n\r\n    function downloadFolder(remote, destination){\r\n        ensureDirectoryExistence(destination + \"/test.txt\");\r\n        client.list(remote, function(err, list){\r\n            if(err){\r\n                reject(err);\r\n            }else{\r\n                list.forEach(function(file){\r\n                    var fileName = decodeName(file[\"name\"]);\r\n                    if([\".\",\"..\"].indexOf(fileName) < 0){\r\n                        var fileType = file[\"type\"];\r\n                        var remoteFullPath = remote + \"/\" + fileName;\r\n                        var destinationFullPath = destination + \"/\" + fileName;\r\n                        if(fileType==\"d\"){\r\n                            downloadFolder(remoteFullPath, destinationFullPath);\r\n                        }else{\r\n                            client.get(remoteFullPath, function(err, stream) {\r\n                                if(err){\r\n                                    reject(err);\r\n                                }else{\r\n                                    var writeStream = stream.pipe(fs.createWriteStream(destinationFullPath));\r\n                                    writeStream.on('error', function(err){\r\n                                        reject(err);\r\n                                    });\r\n                                };\r\n                            });\r\n                        };\r\n                    };\r\n                });\r\n            };\r\n        });\r\n    };\r\n}));\r\n\r\nfunction decodeName(name) {\r\n    return decodeURIComponent(escape(name))\r\n};\r\n\r\nfunction ensureDirectoryExistence(filePath) {\r\n    var dirname = path.dirname(filePath);\r\n    if(fs.existsSync(dirname)){\r\n        return true;\r\n    };\r\n    ensureDirectoryExistence(dirname);\r\n    fs.mkdirSync(dirname);\r\n};",
            "DataName": "DownloadFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        }
    ],
    "engine": [
        "engine.js"
    ],
    "icon": "FTP.png",
    "info": {
        "en": "Module for working with remote servers via FTP, SFTP, SSH protocols.",
        "ru": "Модуль для работы с удаленными серверами посредством FTP, SFTP, SSH протоколов."
    },
    "is_autogenerated": true,
    "languages": [
        {
            "Name": "Node",
            "Version": "8.6.0"
        }
    ],
    "localize": {
		"Port": {"ru":"Порт"},
		"is empty": {"ru":"пуст"},
		"Username": {"ru":"Логин"},
		"Password": {"ru":"Пароль"},
		"Protocol": {"ru":"Протокол"},
		"Host name": {"ru":"Имя хоста"},
		"Remote path": {"ru":"Удаленный путь"},
		"Can be blank": {"ru":"Может быть пустым"},
		"Destination path": {"ru":"Путь назначения"},
		"Port of the remote server.": {"ru":"Порт удаленного сервера."},
		"Password of the remote server.": {"ru":"Пароль удаленного сервера."},
		"Default port for FTP protocol": {"ru":"Порт по умолчанию для FTP протокола"},
		"Username of the remote server.": {"ru":"Имя пользователя удаленного сервера."},
		"Host (URL or IP) of the remote server.": {"ru":"Хост (URL или IP) удаленного сервера."},
		"Default port for SFTP and SSH protocols": {"ru":"Порт по умолчанию для SFTP и SSH протоколов"},
		"The path to the required file/folder on the remote server.": {"ru":"Путь до нужного файла/папки на удаленном сервере."},
		"Configure access to a remote server for working with files.": {"ru":"Настроить доступ к удаленному серверу для работы с файлами."},
		"If a non-existent destination path is specified, it will be created.": {"ru":"Если указан несуществующий путь назначения, он будет создан."},
		"The protocol by which the connection to the remote server will be made.": {"ru":"Протокол по которому будет производится подключение к удаленному серверу."},
		"Download file/folder from a remote server and save to the specified location.": {"ru":"Скачать файл/папку с удаленного сервера и сохранить в указанное место."},
		"In order to execute this action correctly you need to run \"Configure\" action first.": {"ru":"Для правильной работы необходимо сначала выполнить действие \"Настроить\"."},
		"If downloaded files already exist along the destination path, they will be overwritten.": {"ru":"Если по пути назначения уже существуют скачиваемые файлы, то они будут перезаписаны."},
		"The path to the location where the file/folder downloaded from the remote server will be saved.": {"ru":"Путь к месту в которое будет сохранен файл/папка скачанный с у даленного сервера."},
		"This action should be called once before any other action that works with the remote server.": {"ru":"Это действие нужно вызвать один раз перед любым другим действием, которое работает с удаленным сервером."},
		"If an error occurred while execute action, the thread will stop with fail message. If you want to continue thread, use \"Ignore errors\" action.":{"ru":"Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие \"Игнорировать ошибки\"."}
    },
    "major_version": 1,
    "minor_version": 0,
    "modules": [
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "ftp",
            "ModuleVersion": "*"
        }
    ],
    "name": "FTP"
}
