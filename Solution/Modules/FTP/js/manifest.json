{
    "actions": [
        {
            "code": [
                {
                    "file": "FTP_Config_code.js",
                    "name": "FTP_Config_code"
                }
            ],
            "description": {
                "en": "Configure FTP/SSH",
                "ru": "Настроить FTP/SSH"
            },
            "interface": "FTP_Config_interface.js",
            "is_element": false,
            "name": "FTP_Config",
            "select": "FTP_Config_select.js",
            "template": "{{Host}}"
        },
        {
            "code": [
                {
                    "file": "FTP_ReadFile_code.js",
                    "name": "FTP_ReadFile_code"
                }
            ],
            "description": {
                "en": "Read file",
                "ru": "Читать файл"
            },
            "interface": "FTP_ReadFile_interface.js",
            "is_element": false,
            "name": "FTP_ReadFile",
            "select": "FTP_ReadFile_select.js",
            "template": "{{FilePath}} -> {{Save}}"
        },
        {
            "code": [
                {
                    "file": "FTP_WriteFile_code.js",
                    "name": "FTP_WriteFile_code"
                }
            ],
            "description": {
                "en": "Write to file",
                "ru": "Запись в файл"
            },
            "interface": "FTP_WriteFile_interface.js",
            "is_element": false,
            "name": "FTP_WriteFile",
            "select": "FTP_WriteFile_select.js",
            "template": "{{Value}} -> {{FilePath}}"
        },
        {
            "code": [
                {
                    "file": "FTP_CheckExist_code.js",
                    "name": "FTP_CheckExist_code"
                }
            ],
            "description": {
                "en": "Check file/folder exists",
                "ru": "Проверить существование файла/папки"
            },
            "interface": "FTP_CheckExist_interface.js",
            "is_element": false,
            "name": "FTP_CheckExist",
            "select": "FTP_CheckExist_select.js",
            "template": "{{FilePath}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "FTP_GetInfo_code.js",
                    "name": "FTP_GetInfo_code"
                }
            ],
            "description": {
                "en": "File/Folder info",
                "ru": "Информация о файле/папке"
            },
            "interface": "FTP_GetInfo_interface.js",
            "is_element": false,
            "name": "FTP_GetInfo",
            "select": "FTP_GetInfo_select.js",
            "template": "{{FilePath}}"
        },
        {
            "code": [
                {
                    "file": "FTP_Create_code.js",
                    "name": "FTP_Create_code"
                }
            ],
            "description": {
                "en": "Create file/folder",
                "ru": "Создать файл/папку"
            },
            "interface": "FTP_Create_interface.js",
            "is_element": false,
            "name": "FTP_Create",
            "select": "FTP_Create_select.js",
            "template": "{{FilePath}}"
        },
        {
            "code": [
                {
                    "file": "FTP_Delete_code.js",
                    "name": "FTP_Delete_code"
                }
            ],
            "description": {
                "en": "Delete file/folder",
                "ru": "Удалить файл/папку"
            },
            "interface": "FTP_Delete_interface.js",
            "is_element": false,
            "name": "FTP_Delete",
            "select": "FTP_Delete_select.js",
            "template": "{{FilePath}}"
        },
        {
            "code": [
                {
                    "file": "FTP_Search_code.js",
                    "name": "FTP_Search_code"
                }
            ],
            "description": {
                "en": "Search files/folders",
                "ru": "Поиск файлов/папок"
            },
            "interface": "FTP_Search_interface.js",
            "is_element": false,
            "name": "FTP_Search",
            "select": "FTP_Search_select.js",
            "template": "{{FolderPath}} -> {{Save}}"
        },
        {
            "code": [
                {
                    "file": "FTP_Move_code.js",
                    "name": "FTP_Move_code"
                }
            ],
            "description": {
                "en": "Move file/folder",
                "ru": "Переместить Файл/папку"
            },
            "interface": "FTP_Move_interface.js",
            "is_element": false,
            "name": "FTP_Move",
            "select": "FTP_Move_select.js",
            "template": "{{FilePath}} -> {{NewFilePath}}"
        },
		{
            "code": [
                {
                    "file": "FTP_Download_code.js",
                    "name": "FTP_Download_code"
                }
            ],
            "description": {
                "en": "Download file/folder",
                "ru": "Скачать файл/папку"
            },
            "interface": "FTP_Download_interface.js",
            "is_element": false,
            "name": "FTP_Download",
            "select": "FTP_Download_select.js",
            "template": "{{FilePath}} -> {{DestinationPath}}"
        },
		{
            "code": [
                {
                    "file": "FTP_Upload_code.js",
                    "name": "FTP_Upload_code"
                }
            ],
            "description": {
                "en": "Upload file/folder",
                "ru": "Загрузить файл/папку"
            },
            "interface": "FTP_Upload_interface.js",
            "is_element": false,
            "name": "FTP_Upload",
            "select": "FTP_Upload_select.js",
            "template": "{{FilePath}} -> {{DestinationPath}}"
        },
        {
            "code": [
                {
                    "file": "FTP_FileToList_code.js",
                    "name": "FTP_FileToList_code"
                }
            ],
            "description": {
                "en": "Read file to list",
                "ru": "Читать файл в список"
            },
            "interface": "FTP_FileToList_interface.js",
            "is_element": false,
            "name": "FTP_FileToList",
            "select": "FTP_FileToList_select.js",
            "template": "{{FilePath}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "FTP_ListToFile_code.js",
                    "name": "FTP_ListToFile_code"
                }
            ],
            "description": {
                "en": "Write list to file",
                "ru": "Записать список в файл"
            },
            "interface": "FTP_ListToFile_interface.js",
            "is_element": false,
            "name": "FTP_ListToFile",
            "select": "FTP_ListToFile_select.js",
            "template": "{{Value}} -> {{FilePath}}"
        }
    ],
    "api_version": 1,
    "autogenerated_functions": [
		"FTP_ReadFile",
        "FTP_WriteFile",
        "FTP_Config",
        "FTP_CheckExist",
        "FTP_GetInfo",
        "FTP_Create",
        "FTP_Delete",
        "FTP_Move",
        "FTP_Search",
        "FTP_Download",
        "FTP_Upload",
        "FTP_FileToList",
        "FTP_ListToFile"
    ],
    "browser": [
    ],
    "depends": [
    ],
    "description": "Working with remote servers",
    "description_small": {
        "en": "FTP/SSH",
        "ru": "FTP/SSH"
    },
    "developer_email": "sasha9817@mail.ru",
    "developer_name": "GhostZ",
    "developer_site": "https://t.me/GhostZed",
	"embeddeddata": [
        {
            "Data": "const Client = require('ftp');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nvar file_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar destination_directory = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\nvar file_name = path.basename(file_path);\r\nvar file_directory = path.dirname(file_path);\r\nvar destination_path = destination_directory + \"/\" + file_name;\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        fs.stat(file_path, function(err, stats) {\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                if(stats.isDirectory()){\r\n                    walk(file_path, function(err, files) {\r\n                        if(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        }else{\r\n                            files.unshift(file_path);\r\n                            var length = files.length;\r\n                            var count = 0;\r\n                            function counter(){\r\n                                count++;\r\n                                if(count==length){\r\n                                    client.end();\r\n                                };\r\n                            };\r\n                            files.forEach(function(file){\r\n                                var destination_path = destination_directory + \"/\" + file.replace(file_directory, \"\");\r\n                                fs.stat(file, function(err, stats){\r\n                                    if(err){\r\n                                        client.end();\r\n                                        reject(err);\r\n                                    }else{\r\n                                        var isDirectory = stats.isDirectory();\r\n                                        if(isDirectory){\r\n                                            client.mkdir(formatPath(destination_path), true, function(err){\r\n                                                if(err){\r\n                                                    client.end();\r\n                                                    reject(err);\r\n                                                }else{\r\n                                                    counter();\r\n                                                };\r\n                                            });\r\n                                        }else{\r\n                                            var destination_directory = path.dirname(destination_path);\r\n                                            client.mkdir(destination_directory, true, function(err){\r\n                                                if(err){\r\n                                                    client.end();\r\n                                                    reject(err);\r\n                                                }else{\r\n                                                    client.put(file, destination_path, function(err){\r\n                                                        if(err){\r\n                                                            client.end();\r\n                                                            reject(err);\r\n                                                        }else{\r\n                                                            counter();\r\n                                                        };\r\n                                                    });\r\n                                                };\r\n                                            });\r\n                                        };\r\n                                    };\r\n                                });\r\n                            });\r\n                        };\r\n                    });\r\n                }else{\r\n                    client.mkdir(destination_directory, true, function(err){\r\n                        if(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        }else{\r\n                            client.put(file_path, destination_path, function(err){\r\n                                if(err){\r\n                                    client.end();\r\n                                    reject(err);\r\n                                }else{\r\n                                    client.end();\r\n                                };\r\n                            });\r\n                        };\r\n                    });\r\n                };\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));\r\n\r\nfunction walk(dir, done) {\r\n    var results = [];\r\n    fs.readdir(dir, function(err, list){\r\n        if(err){return done(err)};\r\n        var pending = list.length;\r\n        if(!pending){return done(null, results)};\r\n        list.forEach(function(file){\r\n            file = path.resolve(dir, file);\r\n            results.push(formatPath(file));\r\n            fs.stat(file, function(err, stats) {\r\n                if(err){return done(err)};\r\n                if(stats && stats.isDirectory()){\r\n                    walk(file, function(err, res) {\r\n                        if(err){return done(err)};\r\n                        results = results.concat(res);\r\n                        if(!--pending){done(null, results)};\r\n                    });\r\n                }else{\r\n                    if(!--pending){done(null, results)};\r\n                };\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nfunction formatPath(path){\r\n\treturn path.split(\"\\\\\").join(\"/\");\r\n};",
            "DataName": "UploadFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar destination_directory = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\nvar remote_name = path.basename(remote_path);\r\nvar remote_directory = path.dirname(remote_path);\r\nvar destination_path = path.join(destination_directory, remote_name);\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        var exists = client.exists(remote_path);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                var stat = client.stat(remote_path);\r\n                stat.then(function(stats){\r\n                    var isDirectory = stats.isDirectory;\r\n                    if(isDirectory){\r\n                        ensureDirectoryExistence(path.join(destination_path, \"test.txt\"));\r\n                        var downloadDir = client.downloadDir(remote_path, destination_path);\r\n                        downloadDir.then(function(){\r\n                            client.end();\r\n                            resolve();\r\n                        });\r\n                        downloadDir.catch(function(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        });\r\n                    }else{\r\n                        ensureDirectoryExistence(destination_path);\r\n                        var fastGet = client.fastGet(remote_path, destination_path);\r\n                        fastGet.then(function(){\r\n                            client.end();\r\n                            resolve();\r\n                        });\r\n                        fastGet.catch(function(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        });\r\n                    };\r\n                });\r\n                stat.catch(function(err){\r\n                    client.end();\r\n                    reject(err);\r\n                });\r\n            }else{\r\n                client.end();\r\n                reject('The file/folder \"' + remote_path + '\" does not exist');\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            client.end();\r\n            reject(err);\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n}));\r\n\r\nfunction ensureDirectoryExistence(filePath){\r\n    var dirname = path.dirname(filePath);\r\n    if(fs.existsSync(dirname)){\r\n        return true;\r\n    };\r\n    ensureDirectoryExistence(dirname);\r\n    fs.mkdirSync(dirname);\r\n};",
            "DataName": "DownloadSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nvar file_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar destination_directory = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\nvar file_name = path.basename(file_path);\r\nvar destination_path = destination_directory + \"/\" + file_name;\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        fs.stat(file_path, function(err, stats){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                ensureDirectoryExistence(destination_path, function(err){\r\n                    if(err){\r\n                        client.end();\r\n                        reject(err);\r\n                    }else{\r\n                        if(stats.isDirectory()){\r\n                            var uploadDir = client.uploadDir(file_path, destination_path);\r\n                            uploadDir.then(function(){\r\n                                client.end();\r\n                                resolve();\r\n                            });\r\n                            uploadDir.catch(function(err){\r\n                                client.end();\r\n                                reject(err);\r\n                            });\r\n                        }else{\r\n                            var fastPut = client.fastPut(file_path, destination_path);\r\n                            fastPut.then(function(){\r\n                                client.end();\r\n                                resolve();\r\n                            });\r\n                            fastPut.catch(function(err){\r\n                                client.end();\r\n                                reject(err);\r\n                            });\r\n                        };\r\n                    };\r\n                });\r\n            };\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n\r\n    function ensureDirectoryExistence(filePath, done){\r\n        var dirname = path.dirname(filePath);\r\n        var exists = client.exists(dirname);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                done(null);\r\n            }else{\r\n                var mkdir = client.mkdir(dirname, true);\r\n                mkdir.then(function(){\r\n                    done(null);\r\n                });\r\n                mkdir.catch(function(err){\r\n                    done(err);\r\n                });\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            done(err);\r\n        });\r\n    };\r\n}));",
            "DataName": "UploadSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar config = [[FTP_NODE_PARAMETERS]][1];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        var exists = client.exists(remote_path);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                var stat = client.stat(remote_path);\r\n                stat.then(function(stats){\r\n                    var isDirectory = stats.isDirectory;\r\n                    if(isDirectory){\r\n                        var rmdir = client.rmdir(remote_path, true);\r\n                        rmdir.then(function(){\r\n                            client.end();\r\n                            resolve();\r\n                        });\r\n                        rmdir.catch(function(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        });\r\n                    }else{\r\n                        var deletef = client.delete(remote_path);\r\n                        deletef.then(function(){\r\n                            client.end();\r\n                            resolve();\r\n                        });\r\n                        deletef.catch(function(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        });\r\n                    };\r\n                });\r\n                stat.catch(function(err){\r\n                    client.end();\r\n                    reject(err);\r\n                });\r\n            }else{\r\n                client.end();\r\n                reject('The file/folder \"' + remote_path + '\" does not exist');\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            client.end();\r\n            reject(err);\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n}));",
            "DataName": "DeleteSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar config = [[FTP_NODE_PARAMETERS]][1];\r\nvar remote_name = path.basename(remote_path);\r\nvar remote_directory = path.dirname(remote_path);\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        client.list(remote_directory, function(err, list){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                var list = list.filter(function(file){return decodeURIComponent(escape(file[\"name\"]))==remote_name});\r\n                if(list.length > 0){\r\n                    if(list[0][\"type\"]==\"d\"){\r\n                        client.rmdir(remote_path, true, function(err) {\r\n                            if(err){\r\n                                client.end();\r\n                                reject(err);\r\n                            }else{\r\n                                client.end();\r\n                            };\r\n                        });\r\n                    }else{\r\n                        client.delete(remote_path, function(err) {\r\n                            if(err){\r\n                                client.end();\r\n                                reject(err);\r\n                            }else{\r\n                                client.end();\r\n                            };\r\n                        });\r\n                    };\r\n                }else{\r\n                    client.end();\r\n                    reject('The file/folder \"' + remote_path + '\" does not exist');\r\n                };\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));",
            "DataName": "DeleteFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar new_remote_path = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        var exists = client.exists(remote_path);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                ensureDirectoryExistence(new_remote_path, function(err){\r\n                    if(err){\r\n                        client.end();\r\n                        reject(err);\r\n                    }else{\r\n                        var rename = client.rename(remote_path, new_remote_path);\r\n                        rename.then(function(){\r\n                            client.end();\r\n                            resolve();\r\n                        });\r\n                        rename.catch(function(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        });\r\n                    };\r\n                })\r\n            }else{\r\n                client.end();\r\n                reject('The file \"' + remote_path + '\" does not exist');\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            client.end();\r\n            reject(err);\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n\r\n    function ensureDirectoryExistence(filePath, done){\r\n        var dirname = path.dirname(filePath);\r\n        var exists = client.exists(dirname);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                done(null);\r\n            }else{\r\n                var mkdir = client.mkdir(dirname, true);\r\n                mkdir.then(function(){\r\n                    done(null);\r\n                });\r\n                mkdir.catch(function(err){\r\n                    done(err);\r\n                });\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            done(err);\r\n        });\r\n    };\r\n}));",
            "DataName": "MoveSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar new_remote_path = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\nvar new_remote_directory = path.dirname(new_remote_path);\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        client.mkdir(new_remote_directory, true, function(err){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                client.rename(remote_path, new_remote_path, function(err){\r\n                    if(err){\r\n                        client.end();\r\n                        reject(err);\r\n                    }else{\r\n                        client.end();\r\n                    };\r\n                });\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));",
            "DataName": "MoveFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar config = [[FTP_NODE_PARAMETERS]][1];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        var exists = client.exists(remote_path);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                [[FTP_NODE_PARAMETERS]] = true;\r\n            }else{\r\n                [[FTP_NODE_PARAMETERS]] = false;\r\n            };\r\n            client.end();\r\n            resolve();\r\n        });\r\n        exists.catch(function(err){\r\n            client.end();\r\n            reject(err);\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n}));",
            "DataName": "CheckExistSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar config = [[FTP_NODE_PARAMETERS]][1];\r\nvar remote_name = path.basename(remote_path);\r\nvar remote_directory = path.dirname(remote_path);\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        client.list(remote_directory, function(err, list){\r\n            if(err){\r\n                if(err.message.indexOf(\"No such file or directory\") > -1){\r\n                    [[FTP_NODE_PARAMETERS]] = false;\r\n                    client.end();\r\n                }else{\r\n                    client.end();\r\n                    reject(err);\r\n                };\r\n            }else{\r\n                if(list.filter(function(file){return decodeURIComponent(escape(file[\"name\"]))==remote_name}).length > 0){\r\n                    [[FTP_NODE_PARAMETERS]] = true;\r\n                }else{\r\n                    [[FTP_NODE_PARAMETERS]] = false;\r\n                };\r\n                client.end();\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));",
            "DataName": "CheckExistFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar config = [[FTP_NODE_PARAMETERS]][1];\r\nvar remote_directory = path.dirname(remote_path);\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        var exists = client.exists(remote_path);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                var stat = client.stat(remote_path);\r\n                stat.then(function(stats){\r\n                    [[FTP_NODE_PARAMETERS]] = {directory: remote_directory, exists: true, is_directory: stats.isDirectory, is_file: stats.isFile, last_modified: stats.modifyTime, size: stats.size};\r\n                    client.end();\r\n                    resolve();\r\n                });\r\n                stat.catch(function(err){\r\n                    client.end();\r\n                    reject(err);\r\n                });\r\n            }else{\r\n                [[FTP_NODE_PARAMETERS]] = {directory: \"\", exists: false, is_directory: false, is_file: false, last_modified: 0, size: 0};\r\n                client.end();\r\n                resolve();\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            client.end();\r\n            reject(err);\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n}));",
            "DataName": "GetInfoSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar config = [[FTP_NODE_PARAMETERS]][1];\r\nvar remote_name = path.basename(remote_path);\r\nvar remote_directory = path.dirname(remote_path);\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        client.list(remote_directory, function(err, list){\r\n            if(err){\r\n                if(err.message.indexOf(\"No such file or directory\") > -1){\r\n                    [[FTP_NODE_PARAMETERS]] = {directory: \"\", exists: false, is_directory: false, is_file: false, last_modified: 0, size: 0};\r\n                    client.end();\r\n                }else{\r\n                    client.end();\r\n                    reject(err);\r\n                };\r\n            }else{\r\n                var list = list.filter(function(file){return decodeURIComponent(escape(file[\"name\"]))==remote_name});\r\n                if(list.length > 0){\r\n                    var file = list[0];\r\n                    var type = file[\"type\"];\r\n                    var last_modified = new Date(file[\"date\"]).getTime();\r\n                    var size = file[\"size\"];\r\n                    [[FTP_NODE_PARAMETERS]] = {directory: remote_directory, exists: true, is_directory: (type==\"d\" ? true : false), is_file: (type==\"-\" ? true : false), last_modified: last_modified, size: size};\r\n                }else{\r\n                    [[FTP_NODE_PARAMETERS]] = {directory: \"\", exists: false, is_directory: false, is_file: false, last_modified: 0, size: 0};\r\n                };\r\n                client.end();\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));",
            "DataName": "GetInfoFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar destination_directory = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\nvar remote_name = path.basename(remote_path);\r\nvar remote_directory = path.dirname(remote_path);\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        client.list(remote_directory, function(err, list){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                var list = list.filter(function(file){return decodeName(file[\"name\"])==remote_name});\r\n                if(list.length > 0){\r\n                    var file = list[0];\r\n                    var fileName = decodeName(file[\"name\"]);\r\n                    var fileType = file[\"type\"];\r\n                    var destination_path = path.join(destination_directory, fileName);\r\n                    if(fileType==\"d\"){\r\n                        downloadFolder(remote_path, destination_path, function(err){\r\n                            if(err){\r\n                                client.end();\r\n                                reject(err);\r\n                            }else{\r\n                                client.end();\r\n                            };\r\n                        });\r\n                    }else{\r\n                        client.get(remote_path, function(err, stream) {\r\n                            if(err){\r\n                                reject(err);\r\n                            }else{\r\n                                ensureDirectoryExistence(destination_path);\r\n                                var writeStream = stream.pipe(fs.createWriteStream(destination_path));\r\n                                writeStream.on('error', function(err){\r\n                                    client.end();\r\n                                    reject(err);\r\n                                });\r\n                                writeStream.on('close', function close(){\r\n                                    client.end();\r\n                                });\r\n                            };\r\n                        });\r\n                    };\r\n                }else{\r\n                    client.end();\r\n                    reject('The file/folder \"' + remote_path + '\" does not exist');\r\n                };\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n\r\n    function downloadFolder(remote, destination, done){\r\n        ensureDirectoryExistence(path.join(destination, \"test.txt\"));\r\n        client.list(remote, function(err, list){\r\n            if(err){\r\n                done(err);\r\n            }else{\r\n                var list = list.filter(function(file){return [\".\",\"..\"].indexOf(file[\"name\"]) < 0});\r\n                var length = list.length;\r\n                var count = 0;\r\n                function counter(){\r\n                    count++;\r\n                    if(count==length){\r\n                        done(null);\r\n                    };\r\n                };\r\n                list.forEach(function(file){\r\n                    var fileName = decodeName(file[\"name\"]);\r\n                    var fileType = file[\"type\"];\r\n                    var remoteFullPath = remote + \"/\" + fileName;\r\n                    var destination_path = path.join(destination, fileName);\r\n                    if(fileType==\"d\"){\r\n                        downloadFolder(remoteFullPath, destination_path, function(err){\r\n                            if(err){\r\n                                done(err);\r\n                            }else{\r\n                                counter();\r\n                            };\r\n                        });\r\n                    }else{\r\n                        client.get(remoteFullPath, function(err, stream){\r\n                            if(err){\r\n                                done(err);\r\n                            }else{\r\n                                var writeStream = stream.pipe(fs.createWriteStream(destination_path));\r\n                                writeStream.on('error', function(err){\r\n                                    done(err);\r\n                                });\r\n                                writeStream.on('close', function close(){\r\n                                    counter();\r\n                                });\r\n                            };\r\n                        });\r\n                    };\r\n                });\r\n            };\r\n        });\r\n    };\r\n}));\r\n\r\nfunction decodeName(name) {\r\n    return decodeURIComponent(escape(name))\r\n};\r\n\r\nfunction ensureDirectoryExistence(filePath) {\r\n    var dirname = path.dirname(filePath);\r\n    if(fs.existsSync(dirname)){\r\n        return true;\r\n    };\r\n    ensureDirectoryExistence(dirname);\r\n    fs.mkdirSync(dirname);\r\n};",
            "DataName": "DownloadFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\nconst path = require('path');\r\n\r\nvar file_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar file_type = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        ensureDirectoryExistence(file_path, function(err){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                if(file_type==\"directory\"){\r\n                    var mkdir = client.mkdir(file_path, true);\r\n                    mkdir.then(function(){\r\n                        client.end();\r\n                        resolve();\r\n                    });\r\n                    mkdir.catch(function(err){\r\n                        client.end();\r\n                        reject(err);\r\n                    });\r\n                }else{\r\n                    var put = client.put(Buffer.from('', 'utf8'), file_path);\r\n                    put.then(function(){\r\n                        client.end();\r\n                        resolve();\r\n                    });\r\n                    put.catch(function(err){\r\n                        client.end();\r\n                        reject(err);\r\n                    });\r\n                };\r\n            };\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n\r\n    function ensureDirectoryExistence(filePath, done){\r\n        var dirname = path.dirname(filePath);\r\n        var exists = client.exists(dirname);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                done(null);\r\n            }else{\r\n                var mkdir = client.mkdir(dirname, true);\r\n                mkdir.then(function(){\r\n                    done(null);\r\n                });\r\n                mkdir.catch(function(err){\r\n                    done(err);\r\n                });\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            done(err);\r\n        });\r\n    };\r\n}));",
            "DataName": "CreateSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst path = require('path');\r\n\r\nvar file_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar file_type = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\nvar file_directory = path.dirname(file_path);\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        client.mkdir(file_directory, true, function(err){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                if(file_type==\"directory\"){\r\n                    client.mkdir(file_path, true, function(err){\r\n                        if(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        }else{\r\n                            client.end();\r\n                        };\r\n                    });\r\n                }else{\r\n                    client.put(Buffer.from('', 'utf8'), file_path, function(err){\r\n                        if(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        }else{\r\n                            client.end();\r\n                        };\r\n                    });\r\n                };  \r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));",
            "DataName": "CreateFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\nconst path = require('path');\r\n\r\nvar folder_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar mask = [[FTP_NODE_PARAMETERS]][1];\r\nvar recursive = [[FTP_NODE_PARAMETERS]][2];\r\nvar search_files = [[FTP_NODE_PARAMETERS]][3];\r\nvar search_folders = [[FTP_NODE_PARAMETERS]][4];\r\nvar config = [[FTP_NODE_PARAMETERS]][5];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        var exists = client.exists(folder_path);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                walk(folder_path, recursive, search_files, search_folders, function(err, res){\r\n                    if(err){\r\n                        client.end();\r\n                        reject(err);\r\n                    }else{\r\n                        var regex = \"\";\r\n                        if(mask instanceof RegExp){\r\n                            regex = mask;\r\n                        }else{\r\n                            let newPattern = mask.replace(/\\*([^*])*?/gi, '.*');\r\n                            regex = new RegExp(newPattern);\r\n                        };\r\n                        [[FTP_NODE_PARAMETERS]] = res.filter(function(file){return regex.test(path.basename(file))});\r\n                        client.end();\r\n                        resolve();\r\n                    };\r\n                });\r\n            }else{\r\n                client.end();\r\n                reject('The file/folder \"' + folder_path + '\" does not exist');\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            client.end();\r\n            reject(err);\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n\r\n    function walk(dir, recursive, search_files, search_folders, done) {\r\n        var results = [];\r\n        var list = client.list(dir);\r\n        list.then(function(list){\r\n            var pending = list.length;\r\n            if(!pending){return done(null, results)};\r\n            list.forEach(function(file){\r\n                var file_name = file.name;\r\n                var file_type = file.type;\r\n                file = formatPath(path.join(dir, file_name));\r\n                if(file_type==\"d\"){\r\n                    search_folders ? results.push(file) : \"\";\r\n                    if(recursive){\r\n                        walk(file, recursive, search_files, search_folders, function(err, res){\r\n                            if(err){return done(err)};\r\n                            results = results.concat(res);\r\n                            if(!--pending){done(null, results)};\r\n                        });\r\n                    }else{\r\n                        if(!--pending){done(null, results)};\r\n                    };\r\n                };\r\n                if(file_type==\"-\"){\r\n                    search_files ? results.push(file) : \"\";\r\n                    if(!--pending){done(null, results)};\r\n                };\r\n            });\r\n        });\r\n        list.catch(function(err){\r\n            done(err);\r\n        });\r\n    };\r\n}));\r\n\r\nfunction formatPath(path){\r\n\treturn path.split(\"\\\\\").join(\"/\");\r\n};",
            "DataName": "SearchSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst path = require('path');\r\n\r\nvar folder_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar mask = [[FTP_NODE_PARAMETERS]][1];\r\nvar recursive = [[FTP_NODE_PARAMETERS]][2];\r\nvar search_files = [[FTP_NODE_PARAMETERS]][3];\r\nvar search_folders = [[FTP_NODE_PARAMETERS]][4];\r\nvar config = [[FTP_NODE_PARAMETERS]][5];\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        walk(folder_path, recursive, search_files, search_folders, function(err, res){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                var regex = \"\";\r\n                if(mask instanceof RegExp){\r\n                    regex = mask;\r\n                }else{\r\n                    let newPattern = mask.replace(/\\*([^*])*?/gi, '.*');\r\n                    regex = new RegExp(newPattern);\r\n                };\r\n                [[FTP_NODE_PARAMETERS]] = res.filter(function(file){return regex.test(path.basename(file))});\r\n                client.end();\r\n                resolve();\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n\r\n    function walk(dir, recursive, search_files, search_folders, done){\r\n        var results = [];\r\n        client.list(dir, function(err, list){\r\n            if(err){\r\n                done(err);\r\n            }else{\r\n                var list = list.filter(function(file){return [\".\",\"..\"].indexOf(file[\"name\"]) < 0});\r\n                var pending = list.length;\r\n                if(!pending){return done(null, results)};\r\n                list.forEach(function(file){\r\n                    var file_name = decodeName(file.name);\r\n                    var file_type = file.type;\r\n                    file = formatPath(path.join(dir, file_name));\r\n                    if(file_type==\"d\"){\r\n                        search_folders ? results.push(file) : \"\";\r\n                        if(recursive){\r\n                            walk(file, recursive, search_files, search_folders, function(err, res){\r\n                                if(err){return done(err)};\r\n                                results = results.concat(res);\r\n                                if(!--pending){done(null, results)};\r\n                            });\r\n                        }else{\r\n                            if(!--pending){done(null, results)};\r\n                        };\r\n                    };\r\n                    if(file_type==\"-\"){\r\n                        search_files ? results.push(file) : \"\";\r\n                        if(!--pending){done(null, results)};\r\n                    };\r\n                });\r\n            };\r\n        });\r\n    };\r\n}));\r\n\r\nfunction decodeName(name) {\r\n    return decodeURIComponent(escape(name))\r\n};\r\n\r\nfunction formatPath(path){\r\n\treturn path.split(\"\\\\\").join(\"/\");\r\n};",
            "DataName": "SearchFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar base64 = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\nvar encoding = base64 ? 'base64' : 'utf8';\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        var exists = client.exists(remote_path);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                var getf = client.get(remote_path);\r\n                getf.then(function(data){\r\n                    [[FTP_NODE_PARAMETERS]] = data.toString(encoding);\r\n                    client.end();\r\n                    resolve();\r\n                });\r\n                getf.catch(function(err){\r\n                    client.end();\r\n                    reject(err);\r\n                });\r\n            }else{\r\n                client.end();\r\n                reject('The file/folder \"' + remote_path + '\" does not exist');\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            client.end();\r\n            reject(err);\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n}));",
            "DataName": "ReadFileSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst path = require('path');\r\n\r\nvar chunks = [];\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar base64 = [[FTP_NODE_PARAMETERS]][1];\r\nvar config = [[FTP_NODE_PARAMETERS]][2];\r\nvar encoding = base64 ? 'base64' : 'utf8';\r\nvar remote_name = path.basename(remote_path);\r\nvar remote_directory = path.dirname(remote_path);\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        client.list(remote_directory, function(err, list){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                var list = list.filter(function(file){return decodeName(file[\"name\"])==remote_name});\r\n                if(list.length > 0){\r\n                    client.get(remote_path, function(err, stream){\r\n                        if(err){\r\n                            reject(err);\r\n                        }else{\r\n                            stream.on('data', function(chunk){\r\n                                chunks.push(chunk);\r\n                            });\r\n                            stream.on('error', function(err){\r\n                                client.end();\r\n                                reject(err);\r\n                            });\r\n                            stream.on('end', function(){\r\n                                [[FTP_NODE_PARAMETERS]] = Buffer.concat(chunks).toString(encoding);\r\n                                client.end();\r\n                            });\r\n                        };\r\n                    });\r\n                }else{\r\n                    client.end();\r\n                    reject('The file/folder \"' + remote_path + '\" does not exist');\r\n                };\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));\r\n\r\nfunction decodeName(name) {\r\n    return decodeURIComponent(escape(name))\r\n};",
            "DataName": "ReadFileFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ssh2-sftp-client');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar value = [[FTP_NODE_PARAMETERS]][1];\r\nvar base64 = [[FTP_NODE_PARAMETERS]][2];\r\nvar append = [[FTP_NODE_PARAMETERS]][3];\r\nvar config = [[FTP_NODE_PARAMETERS]][4];\r\nvar encoding = base64 ? 'base64' : 'utf8';\r\nvar buf = Buffer.from(value, encoding);\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tvar connect = client.connect(config);\r\n    connect.then(function(){\r\n        ensureDirectoryExistence(remote_path, function(err){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                if(append){\r\n                    var append = client.append(buf, remote_path);\r\n                    append.then(function(){\r\n                        client.end();\r\n                        resolve();\r\n                    });\r\n                    append.catch(function(err){\r\n                        client.end();\r\n                        reject(err);\r\n                    });\r\n                }else{\r\n                    var put = client.put(buf, remote_path);\r\n                    put.then(function(){\r\n                        client.end();\r\n                        resolve();\r\n                    });\r\n                    put.catch(function(err){\r\n                        client.end();\r\n                        reject(err);\r\n                    });\r\n                };\r\n            };\r\n        });\r\n    });\r\n    connect.catch(function(err){\r\n        client.end();\r\n        reject(err);\r\n    });\r\n\r\n    function ensureDirectoryExistence(filePath, done){\r\n        var dirname = path.dirname(filePath);\r\n        var exists = client.exists(dirname);\r\n        exists.then(function(exist){\r\n            if(exist){\r\n                done(null);\r\n            }else{\r\n                var mkdir = client.mkdir(dirname, true);\r\n                mkdir.then(function(){\r\n                    done(null);\r\n                });\r\n                mkdir.catch(function(err){\r\n                    done(err);\r\n                });\r\n            };\r\n        });\r\n        exists.catch(function(err){\r\n            done(err);\r\n        });\r\n    };\r\n}));",
            "DataName": "WriteFileSFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const Client = require('ftp');\r\nconst path = require('path');\r\n\r\nvar remote_path = [[FTP_NODE_PARAMETERS]][0];\r\nvar value = [[FTP_NODE_PARAMETERS]][1];\r\nvar base64 = [[FTP_NODE_PARAMETERS]][2];\r\nvar append = [[FTP_NODE_PARAMETERS]][3];\r\nvar config = [[FTP_NODE_PARAMETERS]][4];\r\nvar encoding = base64 ? 'base64' : 'utf8';\r\nvar buf = Buffer.from(value, encoding);\r\nvar remote_directory = path.dirname(remote_path);\r\nconfig[\"user\"] = config[\"username\"];\r\ndelete config[\"username\"];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var client = new Client();\r\n\tclient.connect(config);\r\n    client.on('ready', function(){\r\n        client.mkdir(remote_directory, true, function(err){\r\n            if(err){\r\n                client.end();\r\n                reject(err);\r\n            }else{\r\n                if(append){\r\n                    client.append(buf, remote_path, function(err){\r\n                        if(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        }else{\r\n                            client.end();\r\n                        };\r\n                    });\r\n                }else{\r\n                    client.put(buf, remote_path, function(err){\r\n                        if(err){\r\n                            client.end();\r\n                            reject(err);\r\n                        }else{\r\n                            client.end();\r\n                        };\r\n                    });\r\n                };\r\n            };\r\n        });\r\n    });\r\n    client.on('error', function(err){\r\n        reject(err);\r\n    });\r\n    client.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));",
            "DataName": "WriteFileFTP",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        }
    ],
    "engine": [
        "engine.js"
    ],
    "icon": "FTP.png",
    "info": {
        "en": "Module for working with remote servers via FTP, SFTP, SSH protocols.",
        "ru": "Модуль для работы с удаленными серверами посредством FTP, SFTP, SSH протоколов."
    },
    "is_autogenerated": true,
    "languages": [
        {
            "Name": "Node",
            "Version": "8.6.0"
        }
    ],
    "localize": {
		"Port": {"ru":"Порт"},
		"List": {"ru":"Список"},
		"Folder": {"ru":"Папка"},
		"is empty": {"ru":"пуст"},
		"Username": {"ru":"Логин"},
		"Password": {"ru":"Пароль"},
		"Protocol": {"ru":"Протокол"},
		"All files": {"ru":"Все файлы"},
		"Host name": {"ru":"Имя хоста"},
		"Is file": {"ru":"Является файлом"},
		"Search files": {"ru":"Искать файлы"},
		"Append file": {"ru":"Дописывать файл"},
		"Search folders": {"ru":"Искать папки"},
		"Is directory": {"ru":"Является папкой"},
		"Is not file": {"ru":"Не является файлом"},
		"Can be blank": {"ru":"Может быть пустым"},
		"Destination path": {"ru":"Путь назначения"},
		"All text files": {"ru":"Все текстовые файлы"},
		"File/Folder size": {"ru":"Размер файла/папки"},
		"Is not directory": {"ru":"Не является папкой"},
		"Remote file path": {"ru":"Удаленный путь к файлу"},
		"Search in subfolders": {"ru":"Искать в подпапках"},
		"All JavaScript files": {"ru":"Все JavaScript файлы"},
		"File/Folder exists.": {"ru":"Файл/Папка существует."},
		"File or folder path": {"ru":"Путь к файлу или папке"},
		"Last modified date": {"ru":"Дата последнего изменения"},
		"File/Folder directory": {"ru":"Директория файла/папки"},
		"Variable not specified": {"ru":"Переменная не указаны"},
		"File/Folder name mask": {"ru":"Маска имени файла/папки"},
		"Variables not specified": {"ru":"Переменные не указаны"},
		"File/Folder existence": {"ru":"Существование файла/папки"},
		"Save in base64 format": {"ru":"Сохранить в формате base64"},
		"Remote destination path": {"ru":"Удаленный путь назначения"},
		"Port of the remote server.": {"ru":"Порт удаленного сервера."},
		"File/Folder does not exist.": {"ru":"Файл/Папка не существует."},
		"Add line ending symbol": {"ru":"Добавить символ окончания строки"},
		"Password of the remote server.": {"ru":"Пароль удаленного сервера."},
		"Remote directory to search": {"ru":"Удаленная директория для поиска"},
		"Data is in base64 format": {"ru":"Данные представлены в формате base64"},
		"Remote path to file or folder": {"ru":"Удаленный путь к файлу или папке"},
		"Default port for FTP protocol": {"ru":"Порт по умолчанию для FTP протокола"},
		"Remote path to new file/folder": {"ru":"Удаленный путь к новому файлу/папке"},
		"Username of the remote server.": {"ru":"Имя пользователя удаленного сервера."},
		"Variable to save the result": {"ru":"Переменная, в которую сохранить результат"},
		"New remote path to file or folder": {"ru":"Новый удаленный путь к файлу или папке"},
		"Host (URL or IP) of the remote server.": {"ru":"Хост (URL или IP) удаленного сервера."},
		"Create file/folder on remote server.": {"ru":"Создать файл/папку на удаленном сервере."},
		"Delete file/folder from remote server.": {"ru":"Удалить файл/папку с удаленного сервера."},
		"Write list to file on remote server.": {"ru":"Записать список в файл на удаленном сервере."},
		"Default port for SFTP and SSH protocols": {"ru":"Порт по умолчанию для SFTP и SSH протоколов"},
		"Write data to a file on a remote server.": {"ru":"Записать данные в файл на удаленном сервере."},
		"If the specified path is missing it will be created.": {"ru":"Если указанный путь отсутствует, он будет создан."},
		"This variable will contain the size of the file/folder.": {"ru":"Эта переменная будет содержать размер файла/папки."},
		"The path to the required file/folder on the remote server.": {"ru":"Путь до нужного файла/папки на удаленном сервере."},
		"Get information about a file located on a remote server.": {"ru":"Получить информацию о файле находящемся на удаленном сервере."},
		"Configure access to a remote server for working with files.": {"ru":"Настроить доступ к удаленному серверу для работы с файлами."},
		"The path on the remote server to the file/folder after moving.": {"ru":"Путь на удаленном сервере к файлу/папке после перемещения."},
		"The path to the file on the remote server which needs to read.": {"ru":"Путь к файлу на удаленном сервере который нужно прочитать."},
		"Move the file/folder to another location on the remote server.": {"ru":"Переместить файл/папку в другое место на удаленном сервере."},
		"If a non-existent destination path is specified, it will be created.": {"ru":"Если указан несуществующий путь назначения, он будет создан."},
		"Upload the file/folder to the specified location on the remote server.": {"ru":"Загрузить файл/папку в указанное место на удаленном сервере."},
		"Search for files/folders in the specified directory on the remote server.": {"ru":"Поиск файлов/папок в указанной директории на удаленном сервере."},
		"Data that will be written to the specified file on the remote server.": {"ru":"Данные которые будут записаны в указанный файл на удаленном сервере."},
		"The path to the file on the remote server in which needs to write data.": {"ru":"Путь к файлу на удаленном сервере в который нужно записать данные."},
		"The path on the remote server to the file/folder which needs to be deleted.": {"ru":"Путь на удаленном сервере к файлу/папке который нужно удалить."},
		"This variable will contain the date the file/folder was last modified.": {"ru":"Эта переменная будет содержать дату последнего изменения файла/папки."},
		"The path on the remote server to the file/folder which needs to be moved.": {"ru":"Путь на удаленном сервере к файлу/папке который нужно переместить."},
		"The path to the file/folder which needs to be uploaded to the remote server.": {"ru":"Путь к файлу/папке который нужно загрузить на удаленный сервер."},
		"The list that will be written to the specified file on the remote server.": {"ru":"Список который будет записан в указанный файл на удаленном сервере."},
		"The path on the remote server to the file/folder which needs to be downloaded.": {"ru":"Путь на удаленном сервере к файлу/папке который нужно скачать."},
		"The path to the file on the remote server in which needs to write the list.": {"ru":"Путь к файлу на удаленном сервере в который нужно записать список."},
		"Read a file on a remote server and store its contents into a variable.": {"ru":"Читать файл на удаленном сервере и сохранить его содержимое в переменную."},
		"The protocol by which the connection to the remote server will be made.": {"ru":"Протокол по которому будет производиться подключение к удаленному серверу."},
		"Check if a file/folder exists at the specified path on the remote server.": {"ru":"Проверить существует ли файл/папка по заданному пути на удаленном сервере."},
		"Download file/folder from a remote server and save to the specified location.": {"ru":"Скачать файл/папку с удаленного сервера и сохранить в указанное место."},
		"The resulting list can be processed using actions from the \"List\" module.": {"ru":"Полученный список можно обработать с помощью действий из модуля \"Список\"."},
		"The path on the remote server to the new file/folder available after creation.": {"ru":"Путь на удаленном сервере к новому файлу/папке доступный после создания."},
		"This action can be used to rename a file/folder on a remote server.": {"ru":"Данное действие можно использовать, чтобы переименовать файл/папку на удаленном сервере."},
		"The path to the directory on the remote server in which the search will be performed.": {"ru":"Путь к директории на удаленном сервере в которой будет производится поиск."},
		"The path on the remote server to the file/folder about which needs to get information.": {"ru":"Путь на удаленном сервере к файлу/папке о котором нужно получить информацию."},
		"The path on the remote server to the file/folder whose existence needs to be checked.": {"ru":"Путь на удаленном сервере к файлу/папке существование которого нужно проверить."},
		"If uploaded files already exist along the destination path, they will be overwritten.": {"ru":"Если загруженные файлы уже существуют по пути назначения, они будут перезаписаны."},
		"This variable will contain the path to the directory where the file/folder is located.": {"ru":"Эта переменная будет содержать путь к директории в которой находится файл/папка."},
		"If downloaded files already exist along the destination path, they will be overwritten.": {"ru":"Если скачиваемые файлы уже существуют по пути назначения, они будут перезаписаны."},
		"This variable will be to true or false depending on the existence of the file/folder.": {"ru":"Эта переменная будет равна true или false в зависимости от существования файла/папки."},
		"The path to the location on the remote server where the uploaded file/folder will be saved.": {"ru":"Путь к месту на удаленном сервере в которое будет сохранен загруженный файл/папка."},
		"In order to execute this action correctly you need to run \"Configure FTP/SSH\" action first.": {"ru":"Для правильной работы необходимо сначала выполнить действие \"Настроить FTP/SSH\"."},
		"The path to the location where the file/folder downloaded from the remote server will be saved.": {"ru":"Путь к месту в которое будет сохранен файл/папка скачанный с удаленного сервера."},
		"The resulting list will contain not only the names of the files/folders, but their full path.": {"ru":"Полученный список будет содержать не только названия файлов/папок, но их полный путь."},
		"This action should be called once before any other action that works with the remote server.": {"ru":"Это действие нужно вызвать один раз перед любым другим действием, которое работает с удаленным сервером."},
		"This variable will be true or false depending on whether the specified path leads to the file is or not.": {"ru":"Эта переменная будет равна true или false в зависимости от того ведет ли указанный путь к файлу или нет."},
		"This variable will be true or false depending on whether the specified path leads to the directory is or not.": {"ru":"Эта переменная будет равна true или false в зависимости от того ведет ли указанный путь к папке или нет."},
		"Variable in which, after the successful execution of the action, the contents of the read file will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записано содержимое прочитонного файла."},
		"Read the file on the remote server, convert its contents to a list, and store this list into a variable.": {"ru":"Прочитайте файл на удаленном сервере, преобразовать его содержимое в список и сохранить этот список в переменную."},
		"Variable in which, after the successful execution of the action, the list obtained from the contents of the file will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан список полученный из содержимого файла."},
		"If a resource is specified in the \"Destination path\" parameter, instead of the content of the resource will indicate its location.": {"ru":"Если в параметре \"Путь назначения\" указан ресурс, вместо содержимого ресурса будет браться его расположение."},
		"The list of files can be obtained using the \"Read file to list\" action or create using actions from the \"List\" module.": {"ru":"Список файлов можно получить с помощью действия \"Читать файл в список\" или создать с помощью действий из модуля \"Список\"."},
		"File/Folder name mask for filtering. The final list will include only files/folders whose names match the mask.": {"ru":"Маска имен файлов/папок по которой будет производиться фильтрация. В итоговый список войдут только файлы/папки чьи имена подходят под маску."},
		"If a resource is specified in the \"File or folder path\" parameter, instead of the content of the resource will indicate its location.": {"ru":"Если в параметре \"Путь к файлу или папке\" указан ресурс, вместо содержимого ресурса будет браться его расположение."},
		"If an error occurred while execute action, the thread will stop with fail message. If you want to continue thread, use \"Ignore errors\" action.":{"ru":"Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие \"Игнорировать ошибки\"."},
		"Variable in which, after successful execution of the action, the list of found files/folders will be written. The list will contain not only the names of files/folders, but their full path.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан список найденных файлов/папок. Список будет содержать не только названия файлов/папок, но их полный путь."}
    },
    "major_version": 1,
    "minor_version": 0,
    "modules": [
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "ftp",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "ssh2-sftp-client",
            "ModuleVersion": "*"
        }
    ],
    "name": "FTP"
}