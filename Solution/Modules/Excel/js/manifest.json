{
    "actions": [
		{
            "code": [
                {
                    "file": "Excel_GetSheetsList_code.js",
                    "name": "Excel_GetSheetsList_code"
                }
            ],
            "description": {
                "en": "Get sheets list",
                "ru": "Получить список листов"
            },
            "interface": "Excel_GetSheetsList_interface.js",
            "is_element": false,
            "name": "Excel_GetSheetsList",
            "select": "Excel_GetSheetsList_select.js",
            "template": "{{FilePath}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "Excel_AddSheet_code.js",
                    "name": "Excel_AddSheet_code"
                }
            ],
            "description": {
                "en": "Add sheet",
                "ru": "Добавить лист"
            },
            "interface": "Excel_AddSheet_interface.js",
            "is_element": false,
            "name": "Excel_AddSheet",
            "select": "Excel_AddSheet_select.js",
            "template": "{{SheetName}} -> {{FilePath}}"
        },
        {
            "code": [
                {
                    "file": "Excel_RenameSheet_code.js",
                    "name": "Excel_RenameSheet_code"
                }
            ],
            "description": {
                "en": "Rename sheet",
                "ru": "Переименовать лист"
            },
            "interface": "Excel_RenameSheet_interface.js",
            "is_element": false,
            "name": "Excel_RenameSheet",
            "select": "Excel_RenameSheet_select.js",
            "template": "{{SheetIndexOrName}} -> {{NewSheetName}}"
        },
		{
            "code": [
                {
                    "file": "Excel_MoveSheet_code.js",
                    "name": "Excel_MoveSheet_code"
                }
            ],
            "description": {
                "en": "Move sheet",
                "ru": "Переместить лист"
            },
            "interface": "Excel_MoveSheet_interface.js",
            "is_element": false,
            "name": "Excel_MoveSheet",
            "select": "Excel_MoveSheet_select.js",
            "template": "{{SheetIndexOrName}} -> {{NewSheetIndex}}"
        },
		{
            "code": [
                {
                    "file": "Excel_DeleteSheet_code.js",
                    "name": "Excel_DeleteSheet_code"
                }
            ],
            "description": {
                "en": "Delete sheet",
                "ru": "Удалить лист"
            },
            "interface": "Excel_DeleteSheet_interface.js",
            "is_element": false,
            "name": "Excel_DeleteSheet",
            "select": "Excel_DeleteSheet_select.js",
            "template": "{{SheetIndexOrName}}"
        },
        {
            "code": [
                {
                    "file": "Excel_ReadCell_code.js",
                    "name": "Excel_ReadCell_code"
                }
            ],
            "description": {
                "en": "Read cell",
                "ru": "Читать ячейку"
            },
            "interface": "Excel_ReadCell_interface.js",
            "is_element": false,
            "name": "Excel_ReadCell",
            "select": "Excel_ReadCell_select.js",
            "template": "{{CellAddress}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "Excel_WriteToCell_code.js",
                    "name": "Excel_WriteToCell_code"
                }
            ],
            "description": {
                "en": "Write to cell",
                "ru": "Запись в ячейку"
            },
            "interface": "Excel_WriteToCell_interface.js",
            "is_element": false,
            "name": "Excel_WriteToCell",
            "select": "Excel_WriteToCell_select.js",
            "template": "{{Data}} -> {{CellAddress}}"
        },
        {
            "code": [
                {
                    "file": "Excel_ReadSheet_code.js",
                    "name": "Excel_ReadSheet_code"
                }
            ],
            "description": {
                "en": "Read sheet",
                "ru": "Читать лист"
            },
            "interface": "Excel_ReadSheet_interface.js",
            "is_element": false,
            "name": "Excel_ReadSheet",
            "select": "Excel_ReadSheet_select.js",
            "template": "{{SheetIndexOrName}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "Excel_WriteToSheet_code.js",
                    "name": "Excel_WriteToSheet_code"
                }
            ],
            "description": {
                "en": "Write to sheet",
                "ru": "Запись на лист"
            },
            "interface": "Excel_WriteToSheet_interface.js",
            "is_element": false,
            "name": "Excel_WriteToSheet",
            "select": "Excel_WriteToSheet_select.js",
            "template": "{{Data}} -> {{SheetIndexOrName}}"
        },
        {
            "code": [
                {
                    "file": "Excel_ReadRows_code.js",
                    "name": "Excel_ReadRows_code"
                }
            ],
            "description": {
                "en": "Read rows",
                "ru": "Читать строки"
            },
            "interface": "Excel_ReadRows_interface.js",
            "is_element": false,
            "name": "Excel_ReadRows",
            "select": "Excel_ReadRows_select.js",
            "template": "{{FromRow}}:{{ToRow}} -> {{Save}}"
        },
        {
            "code": [
                {
                    "file": "Excel_InsertRows_code.js",
                    "name": "Excel_InsertRows_code"
                }
            ],
            "description": {
                "en": "Insert rows",
                "ru": "Вставить строки"
            },
            "interface": "Excel_InsertRows_interface.js",
            "is_element": false,
            "name": "Excel_InsertRows",
            "select": "Excel_InsertRows_select.js",
            "template": "{{Data}} -> {{FromRow}}"
        },
		{
            "code": [
                {
                    "file": "Excel_DeleteRows_code.js",
                    "name": "Excel_DeleteRows_code"
                }
            ],
            "description": {
                "en": "Delete rows",
                "ru": "Удалить строки"
            },
            "interface": "Excel_DeleteRows_interface.js",
            "is_element": false,
            "name": "Excel_DeleteRows",
            "select": "Excel_DeleteRows_select.js",
            "template": "{{FromRow}} - {{Count}}"
        },
        {
            "code": [
                {
                    "file": "Excel_ReadCellsRange_code.js",
                    "name": "Excel_ReadCellsRange_code"
                }
            ],
            "description": {
                "en": "Read cells range",
                "ru": "Читать область ячеек"
            },
            "interface": "Excel_ReadCellsRange_interface.js",
            "is_element": false,
            "name": "Excel_ReadCellsRange",
            "select": "Excel_ReadCellsRange_select.js",
            "template": "{{FromCell}}:{{ToCell}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "Excel_WriteToCellsRange_code.js",
                    "name": "Excel_WriteToCellsRange_code"
                }
            ],
            "description": {
                "en": "Write to cells range",
                "ru": "Запись в область ячеек"
            },
            "interface": "Excel_WriteToCellsRange_interface.js",
            "is_element": false,
            "name": "Excel_WriteToCellsRange",
            "select": "Excel_WriteToCellsRange_select.js",
            "template": "{{Data}} -> {{FromCell}}:{{ToCell}}"
        }
    ],
    "api_version": 1,
    "autogenerated_functions": [
        "Excel_GetSheetsList",
        "Excel_AddSheet",
        "Excel_RenameSheet",
		"Excel_MoveSheet",
        "Excel_DeleteSheet",
        "Excel_ReadCell",
        "Excel_WriteToCell",
        "Excel_ReadSheet",
        "Excel_WriteToSheet",
        "Excel_ReadRows",
        "Excel_InsertRows",
        "Excel_DeleteRows",
        "Excel_ReadCellsRange",
        "Excel_WriteToCellsRange"
    ],
    "browser": [
    ],
    "depends": [
    ],
    "description": "Working with excel files",
    "description_small": {
        "en": "Excel",
        "ru": "Excel"
    },
    "developer_email": "sasha9817@mail.ru",
    "developer_name": "GhostZ",
    "developer_site": "https://t.me/GhostZed",
    "embeddeddata": [
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    var sheets = workbook.sheets();\r\n                    [[XLSX_NODE_PARAMETERS]] = sheets.map(function(sheet){return sheet.name()});\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                return resolve();\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelGetSheetsList",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar sheet_index = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        var file = exist ? xlsx.fromFileAsync(file_path) : xlsx.fromBlankAsync();\r\n        file.then(function(workbook){\r\n            try{\r\n                sheet_index===\"\" ? workbook.addSheet(sheet_name) : workbook.addSheet(sheet_name, sheet_index);\r\n            }catch(err){\r\n                reject(err);\r\n            };\r\n            \r\n            var toFile = workbook.toFileAsync(file_path);\r\n            toFile.then(function(){\r\n                return resolve();\r\n            });\r\n            toFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        });\r\n        file.catch(function(err){\r\n            return reject(err);\r\n        });\r\n    });\r\n}));",
            "DataName": "ExcelAddSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar new_sheet_name = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    workbook.sheet(sheet_index_or_name).name(new_sheet_name);\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                var toFile = workbook.toFileAsync(file_path);\r\n                toFile.then(function(){\r\n                    return resolve();\r\n                });\r\n                toFile.catch(function(err){\r\n                    return reject(err);\r\n                });\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelRenameSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar new_sheet_index = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    new_sheet_index===\"\" ? workbook.moveSheet(sheet_index_or_name) : workbook.moveSheet(sheet_index_or_name, new_sheet_index);\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                var toFile = workbook.toFileAsync(file_path);\r\n                toFile.then(function(){\r\n                    return resolve();\r\n                });\r\n                toFile.catch(function(err){\r\n                    return reject(err);\r\n                });\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelMoveSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    workbook.sheet(sheet_index_or_name) ? workbook.sheet(sheet_index_or_name).delete() : resolve();\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                var toFile = workbook.toFileAsync(file_path);\r\n                toFile.then(function(){\r\n                    return resolve();\r\n                });\r\n                toFile.catch(function(err){\r\n                    return reject(err);\r\n                });\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            resolve();\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelDeleteSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst RichText = require('xlsx-Populate').RichText;\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar cell_address = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    var value = workbook.sheet(sheet_index_or_name).cell(cell_address).value();\r\n                    [[XLSX_NODE_PARAMETERS]] = value instanceof RichText ? value.text() : value;\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                return resolve();\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelReadCell",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar cell_address = [[XLSX_NODE_PARAMETERS]][2];\r\nvar data = [[XLSX_NODE_PARAMETERS]][3];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        var file = exist ? xlsx.fromFileAsync(file_path) : xlsx.fromBlankAsync();\r\n        file.then(function(workbook){\r\n            try{\r\n                workbook.sheet(sheet_index_or_name).cell(cell_address).value(data);\r\n            }catch(err){\r\n                reject(err);\r\n            };\r\n            \r\n            var toFile = workbook.toFileAsync(file_path);\r\n            toFile.then(function(){\r\n                return resolve();\r\n            });\r\n            toFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        });\r\n        file.catch(function(err){\r\n            return reject(err);\r\n        });\r\n    });\r\n}));",
            "DataName": "ExcelWriteToCell",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst RichText = require('xlsx-Populate').RichText;\r\nconst fs = require('fs');\r\nconst util = require(\"../ExcelUtil\");\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar data_format = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    var usedRange = workbook.sheet(sheet_index_or_name).usedRange();\r\n                    var list = (typeof usedRange!==\"undefined\") ? usedRange.map(function(cell){return (cell.value() instanceof RichText) ? cell.value().text() : cell.value()}) : [];\r\n                    [[XLSX_NODE_PARAMETERS]] = util.format_results(list, data_format);\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                return resolve();\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelReadSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nconst util = require(\"../ExcelUtil\");\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar data = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    data = util.format_data(data);\r\n    fs.exists(file_path, function(exist){\r\n        var file = exist ? xlsx.fromFileAsync(file_path) : xlsx.fromBlankAsync();\r\n        file.then(function(workbook){\r\n            try{\r\n                workbook.sheet(sheet_index_or_name).cell(\"A1\").value(data);\r\n            }catch(err){\r\n                reject(err);\r\n            };\r\n            \r\n            var toFile = workbook.toFileAsync(file_path);\r\n            toFile.then(function(){\r\n                return resolve();\r\n            });\r\n            toFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        });\r\n        file.catch(function(err){\r\n            return reject(err);\r\n        });\r\n    });\r\n}));",
            "DataName": "ExcelWriteToSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst RichText = require('xlsx-Populate').RichText;\r\nconst fs = require('fs');\r\nconst util = require(\"../ExcelUtil\");\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar from_row = [[XLSX_NODE_PARAMETERS]][2];\r\nvar to_row = [[XLSX_NODE_PARAMETERS]][3];\r\nvar data_format = [[XLSX_NODE_PARAMETERS]][4];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    var list = [];\r\n                    var sheet = workbook.sheet(sheet_index_or_name);\r\n                    var usedRange = sheet.usedRange();\r\n                    if(typeof usedRange!==\"undefined\"){\r\n                        var columnNumber = usedRange.endCell().columnNumber();\r\n                        var range = sheet.range(from_row, 1, to_row, columnNumber);\r\n                        list = (typeof range!==\"undefined\") ? range.map(function(cell){return (cell.value() instanceof RichText) ? cell.value().text() : cell.value()}) : [];\r\n                    };\r\n                    [[XLSX_NODE_PARAMETERS]] = util.format_results(list, data_format);\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                return resolve();\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelReadRows",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nconst util = require(\"../ExcelUtil\");\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar from_row = [[XLSX_NODE_PARAMETERS]][2];\r\nvar data = [[XLSX_NODE_PARAMETERS]][3];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    data = util.format_data(data);\r\n    fs.exists(file_path, function(exist){\r\n        var file = exist ? xlsx.fromFileAsync(file_path) : xlsx.fromBlankAsync();\r\n        file.then(function(workbook){\r\n            try{\r\n                var list = [];\r\n                var sheet = workbook.sheet(sheet_index_or_name);\r\n                var usedRange = sheet.usedRange();\r\n                if(typeof usedRange!==\"undefined\"){\r\n                    list = usedRange.value();\r\n                };\r\n                if(list.length<from_row){\r\n                    sheet.cell(\"A\" + from_row).value(data);\r\n                }else{\r\n                    list = util.replace_null(list);\r\n                    var list_end = list.splice(from_row-1);\r\n                    list = list.concat(data);\r\n                    list = list.concat(list_end);\r\n                    sheet.cell(\"A1\").value(list);\r\n                };\r\n            }catch(err){\r\n                reject(err);\r\n            };\r\n            \r\n            var toFile = workbook.toFileAsync(file_path);\r\n            toFile.then(function(){\r\n                return resolve();\r\n            });\r\n            toFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        });\r\n        file.catch(function(err){\r\n            return reject(err);\r\n        });\r\n    });\r\n}));",
            "DataName": "ExcelInsertRows",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar from_row = [[XLSX_NODE_PARAMETERS]][2];\r\nvar count = [[XLSX_NODE_PARAMETERS]][3];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        var file = exist ? xlsx.fromFileAsync(file_path) : xlsx.fromBlankAsync();\r\n        file.then(function(workbook){\r\n            try{\r\n                var sheet = workbook.sheet(sheet_index_or_name);\r\n                sheet._rows.splice(from_row, count);\r\n                sheet._rows.map(function(row, index){\r\n                    row._node.attributes.r = index;\r\n                    return row;\r\n                });\r\n            }catch(err){\r\n                reject(err);\r\n            };\r\n            \r\n            var toFile = workbook.toFileAsync(file_path);\r\n            toFile.then(function(){\r\n                return resolve();\r\n            });\r\n            toFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        });\r\n        file.catch(function(err){\r\n            return reject(err);\r\n        });\r\n    });\r\n}));",
            "DataName": "ExcelDeleteRows",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst RichText = require('xlsx-Populate').RichText;\r\nconst fs = require('fs');\r\nconst util = require(\"../ExcelUtil\");\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar from_cell = [[XLSX_NODE_PARAMETERS]][2];\r\nvar to_cell = [[XLSX_NODE_PARAMETERS]][3];\r\nvar data_format = [[XLSX_NODE_PARAMETERS]][4];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    var range = workbook.sheet(sheet_index_or_name).range(from_cell, to_cell);\r\n                    var list = (typeof range!==\"undefined\") ? range.map(function(cell){return (cell.value() instanceof RichText) ? cell.value().text() : cell.value()}) : [];\r\n                    [[XLSX_NODE_PARAMETERS]] = util.format_results(list, data_format);\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                return resolve();\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelReadCellsRange",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nconst util = require(\"../ExcelUtil\");\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar from_cell = [[XLSX_NODE_PARAMETERS]][2];\r\nvar to_cell = [[XLSX_NODE_PARAMETERS]][3];\r\nvar data = [[XLSX_NODE_PARAMETERS]][4];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    data = util.format_data(data);\r\n    fs.exists(file_path, function(exist){\r\n        var file = exist ? xlsx.fromFileAsync(file_path) : xlsx.fromBlankAsync();\r\n        file.then(function(workbook){\r\n            try{\r\n                workbook.sheet(sheet_index_or_name).range(from_cell, to_cell).value(data);\r\n            }catch(err){\r\n                reject(err);\r\n            };\r\n            \r\n            var toFile = workbook.toFileAsync(file_path);\r\n            toFile.then(function(){\r\n                return resolve();\r\n            });\r\n            toFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        });\r\n        file.catch(function(err){\r\n            return reject(err);\r\n        });\r\n    });\r\n}));",
            "DataName": "ExcelWriteToCellsRange",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "var self = this;\n\nthis.csv_generate = function(list, separator=\",\"){\n    var res = '';\n    var first = true;\n    list.forEach(function(item=\"\"){\n        var add = item;\n        if(item.indexOf(\";\") > -1 || item.indexOf(\":\") > -1 || item.indexOf(\",\") > -1 || item.indexOf(separator) > -1){\n            add = \"\\\"\" + add.replace(/[\"]/gi, \"\\\"\\\"\") + \"\\\"\";\n        };\n        if(!first){\n            res += separator;\n        }else{\n            first = false;\n        };\n        res += add;\n    });\n    return res;\n};\nthis.csv_parse = function(line){\n    var res = [];\n    var index = 0;\n    var len = line.length;\n    var InsideQuotes = false;\n    var CurrentElement = '';\n    \n    while(index<len){\n        var c = line[index];\n        var n = '';\n        var HasNext = (index + 1) < len;\n        if(HasNext){\n            n = line[index + 1];\n        };\n        index++;\n\n        if(c=='\\\"'){\n            if(InsideQuotes){\n                if(!HasNext || n!='\\\"'){\n                    InsideQuotes = false;\n                    continue;\n                }else{\n                    CurrentElement += \"\\\"\";\n                    index++;\n                    continue;\n                }\n            }else{\n                InsideQuotes = true;\n                continue;\n            }\n        };\n\n        if(c==':' || c==';' || c==','){\n            if(InsideQuotes){\n                CurrentElement += c;\n                continue;\n            }else{\n                res.push(CurrentElement);\n                CurrentElement = '';\n                continue;\n            }\n        };\n        CurrentElement += c;\n    };\n    res.push(CurrentElement);\n\n    return res;\n};\nthis.replace_null = function(rows){\n    return rows.map(function(row){return row.map(function(cell){return (cell==null) ? \"\" : cell})})\n};\nthis.format_data = function(data){\n    if(typeof data!==\"object\"){\n        data = data.split(/\\r?\\n/);\n    };\n    if(typeof data[0]!==\"object\"){\n        data = data.map(function(row){return (typeof row!==\"object\") ? self.csv_parse(row) : row});\n    };\n    return data;\n};\nthis.format_results = function(results, format){\n    results = self.replace_null(results);\n    if(format==\"CSV list\" || format==\"CSV string\"){\n        results = results.map(function(row){return self.csv_generate(row, \":\")});\n        if(format==\"CSV string\"){\n            results = results.join(\"\\r\\n\");\n        };\n    };\n    return results;\n};",
            "DataName": "ExcelUtil",
            "DataType": 1,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        }
    ],
    "engine": [
        "engine.js"
    ],
    "icon": "Excel.png",
    "info": {
        "en": "Module for working with excel files.",
        "ru": "Модуль для работы с excel файлами."
    },
    "is_autogenerated": true,
    "languages": [
        {
            "Name": "Node",
            "Version": "8.6.0"
        }
    ],
    "localize": {
		"Numbеr": {"ru":"Число"},
		"Sheet1": {"ru":"Лист1"},
		"Sheet2": {"ru":"Лист2"},
		"Analog": {"ru":"Аналог"},
		"String": {"ru":"Строка"},
		"is empty": {"ru":"пуст"},
		"Count": {"ru":"Количество"},
		"To row": {"ru":"До строки"},
		"To cell": {"ru":"До ячейки"},
		"From row": {"ru":"Со строки"},
		"From cell": {"ru":"С ячейки"},
		"New Sheet": {"ru":"Новый лист"},
		"Sheet name": {"ru":"Имя листа"},
		"File path": {"ru":"Путь к файлу"},
		"Sheet index": {"ru":"Индекс листа"},
		"Data format": {"ru":"Формат данных"},
		"Cell address": {"ru":"Адрес ячейки"},
		"Can be blank": {"ru":"Может быть пустым"},
		"New sheet name": {"ru":"Новое имя листа"},
		"New sheet index": {"ru":"Новый индекс листа"},
		"First sheet name": {"ru":"Имя первого листа"},
		"Second sheet name": {"ru":"Имя второго листа"},
		"First sheet index": {"ru":"Индекс первого листа"},
		"Second sheet index": {"ru":"Индекс второго листа"},
		"Sheet index or name": {"ru":"Индекс или имя листа"},
		"The name of new sheet.": {"ru":"Имя нового листа."},
		"The index of new sheet.": {"ru":"Индекс нового листа."},
		"First column, first row": {"ru":"Первая колонка, первая строка"},
		"Second column, second row": {"ru":"Вторая колонка, вторая строка"},
		"Cell address in excel file.": {"ru":"Адрес ячейки в excel файле."},
		"Delete rows from excel file.": {"ru":"Удалить строки из excel файла."},
		"Insert rows into an excel file.": {"ru":"Вставить строки в excel файл."},
		"Add new sheet to excel file.": {"ru":"Добавить новый лист в excel файл."},
		"Variable to save the result": {"ru":"Переменная, в которую сохранить результат"},
		"Index or sheet name in excel file.": {"ru":"Индекс или имя листа в excel файле."},
		"The number of rows to be deleted.": {"ru":"Количество строк которое будет удалено."},
		"Write data to sheet in excel file.": {"ru":"Записать данные на лист в excel файле."},
		"The sheet will have the specified index": {"ru":"Лист будет иметь указанный индекс"},
		"Get list of sheets from excel file.": {"ru":"Получить список листов из excel файла."},
		"The ending cell address in excel file.": {"ru":"Адрес конечной ячейки в excel файле."},
		"Row number where reading ends.": {"ru":"Номер строки на которой заканчивается чтение."},
		"Move specified sheet in excel file.": {"ru":"Переместить указанный лист в excel файле."},
		"The starting cell address in excel file.": {"ru":"Адрес начальной ячейки в excel файле."},
		"Write data to a cell in an excel file.": {"ru":"Записать данные в ячейку в excel файле."},
		"Delete specified sheet from excel file.": {"ru":"Удалить указанный лист из excel файла."},
		"Row number from which reading starts.": {"ru":"Номер строки с которой начинается чтение."},
		"The rows data which needs to be inserted.": {"ru":"Данные строк, которые нужно вставить."},
		"The sheet will be added to the end of the book": {"ru":"Лист будет добавлен в конец книги"},
		"The sheet will be moved to the end of the book": {"ru":"Лист будет перемещен в конец книги"},
		"Rename the specified sheet in excel file.": {"ru":"Переименовать указанный лист в excel файле."},
		"Write data to cells range from excel file.": {"ru":"Записать данные в область ячеек из excel файла."},
		"The sheet will be added before the specified sheet": {"ru":"Лист будет добавлен перед указанным листом"},
		"Row number from which to start inserting rows.": {"ru":"Номер строки с которой начинается вставка строк."},
		"Row number from which to start deleting rows.": {"ru":"Номер строки с которой начинается удаление строк."},
		"The sheet will be placed in before the specified sheet": {"ru":"Лист будет помещен перед указанным листом"},
		"The path to the excel file which needs to add the sheet.": {"ru":"Путь к excel файлу в который нужно добавить лист."},
		"If the file or sheet is missing, no error will occur.": {"ru":"Если файл или лист отсутствуют, ошибки не произойдет."},
		"The data which needs to be written to the specified cell.": {"ru":"Данные которые нужно записать в указанную ячейку."},
		"The data which needs to be written to the specified sheet.": {"ru":"Данные которые нужно записать на указанный лист."},
		"Rows following the deleted rows will be shifted up.": {"ru":"Строки, идущие после удаляемых строк, будут смещены вверх."},
		"The name of the sheet after successful completion of the action.": {"ru":"Имя листа после успешного выполнения действия."},
		"The path to the excel file in which needs to move the sheet.": {"ru":"Путь к excel файлу в котором нужно переместить лист."},
		"The path to the excel file where on needs to insert the rows.": {"ru":"Путь к excel файлу в который нужно вставить строки."},
		"The path to the excel file from which needs to read the sheet.": {"ru":"Путь к excel файлу из которого нужно прочитать лист."},
		"The path to the excel file from which needs to delete the sheet.": {"ru":"Путь к excel файлу из которого нужно удалить лист."},
		"The index of the sheet after successful completion of the action.": {"ru":"Индекс листа после успешного выполнения действия."},
		"The path to the excel file from which needs to read the rows.": {"ru":"Путь к excel файлу из которого нужно прочитать строки."},
		"The path to the excel file from which needs to read the cell.": {"ru":"Путь к excel файлу из которого нужно прочитать ячейку."},
		"The path to the excel file from which needs to remove the rows.": {"ru":"Путь к excel файлу из которого нужно удалить строки."},
		"The path to the excel file from which needs to read the cells.": {"ru":"Путь к excel файлу из которого нужно прочитать ячейки."},
		"The path to the excel file in which needs to rename the sheet.": {"ru":"Путь к excel файлу в котором нужно переименовать лист."},
		"The data which needs to be written to the specified cells range.": {"ru":"Данные которые нужно записать в указанную область ячеек."},
		"The format in which the read data will be saved to variable.": {"ru":"Формат, в котором прочитанные данные будут сохранены в переменную."},
		"The path to the excel file where in the cell needs to write the data.": {"ru":"Путь к excel файлу в ячейку которого нужно записать данные."},
		"The path to the excel file where on the sheet needs to write the data.": {"ru":"Путь к excel файлу на лист которого нужно записать данные."},
		"The path to the excel file where in the cells needs to write the data.": {"ru":"Путь к excel файлу в ячейки которого нужно записать данные."},
		"The path to the excel file from which needs to get the list of sheets.": {"ru":"Путь к excel файлу из которого нужно получить список листов."},
		"Rows that are in the new rows insertion zone will be shifted down.": {"ru":"Строки, находящиеся в зоне вставки новых строк, будут смещены вниз."},
		"Read a cell from an excel file and save its contents to a variable.": {"ru":"Читать ячейку из excel файла и сохранить её содержимое в переменную."},
		"Read a rows from an excel file and save its contents to a variable.": {"ru":"Читать строки из excel файла и сохранить их содержимое в переменную."},
		"Read a sheet from an excel file and save its contents to a variable.": {"ru":"Читать лист из excel файла и сохранить его содержимое в переменную."},
		"The resulting list can be processed using actions from the \"List\" module.": {"ru":"Полученный список можно обработать с помощью действий из модуля \"Список\"."},
		"Read a cells range from an excel file and save their contents to a variable.": {"ru":"Читать область ячеек из excel файла и сохранить их содержимое в переменную."},
		"If the \"Sheet index\" parameter is empty, the sheet will be added to the end of the book.": {"ru":"Если параметр \"Индекс листа\" пуст, лист будет добавлен в конец книги."},
		"If the \"New sheet index\" parameter is empty, the sheet will be moved to the end of the book.": {"ru":"Если параметр \"Новый индекс листа\" пуст, лист будет перемещен в конец книги."},
		"Variable in which, after successful execution of the action, the list of sheets will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан список листов."},
		"Variable in which, after successful execution of the action, the contents of the rows will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записано содержимое строк."},
		"Variable in which, after successful execution of the action, the contents of the cell will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записано содержимое ячейки."},
		"Variable in which, after successful execution of the action, the contents of the cells will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записано содержимое ячеек."},
		"Variable in which, after successful execution of the action, the contents of the sheet will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записано содержимое листа."},
		"In the \"Sheet index\" parameter, you can specify the name of an existing sheet, then a new sheet will be added before it.": {"ru":"В параметр \"Индекс листа\" можно указать имя уже существующего листа, тогда новый лист будет добавлен перед ним."},
		"You can specify a standard address with a column letter and row number, or the column number and row number separated by *.": {"ru":"Можно указать стандартный адрес с буквой колонки и номером строки, или номер колонки и номер строки через разделитель *."},
		"In the \"New sheet index\" parameter, you can specify the name of an existing sheet, then the specified sheet will be placed in front of it.": {"ru":"В параметр \"Новый индекс листа\" можно указать имя существующего листа, тогда указанный лист будет помещен перед ним."},
		"If an error occurred while execute action, the thread will stop with fail message. If you want to continue thread, use \"Ignore errors\" action.":{"ru":"Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие \"Игнорировать ошибки\"."}
    },
    "major_version": 1,
    "minor_version": 0,
    "modules": [
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "xlsx-populate",
            "ModuleVersion": "*"
        }
    ],
    "name": "Excel"
}
