{
    "actions": [
        {
            "code": [
                {
                    "file": "Archive_Unpack_code.js",
                    "name": "Archive_Unpack_code"
                }
            ],
            "description": {
                "en": "Unpack archive",
                "ru": "Распаковать архив"
            },
            "interface": "Archive_Unpack_interface.js",
            "is_element": false,
            "name": "Archive_Unpack",
            "select": "Archive_Unpack_select.js",
            "template": "{{ArchivePath}} -> {{DestinationPath}}"
        },
		{
            "code": [
                {
                    "file": "Archive_ArchiveFolder_code.js",
                    "name": "Archive_ArchiveFolder_code"
                }
            ],
            "description": {
                "en": "Archive folder",
                "ru": "Заархивировать папку"
            },
            "interface": "Archive_ArchiveFolder_interface.js",
            "is_element": false,
            "name": "Archive_ArchiveFolder",
            "select": "Archive_ArchiveFolder_select.js",
            "template": "{{FolderPath}} -> {{DestinationPath}}"
        },
		{
            "code": [
                {
                    "file": "Archive_ArchiveFiles_code.js",
                    "name": "Archive_ArchiveFiles_code"
                }
            ],
            "description": {
                "en": "Archive files",
                "ru": "Заархивировать файлы"
            },
            "interface": "Archive_ArchiveFiles_interface.js",
            "is_element": false,
            "name": "Archive_ArchiveFiles",
            "select": "Archive_ArchiveFiles_select.js",
            "template": "{{DestinationPath}}"
        },
		{
            "code": [
                {
                    "file": "Archive_GetFileList_code.js",
                    "name": "Archive_GetFileList_code"
                }
            ],
            "description": {
                "en": "Get file list from archive",
                "ru": "Получить список файлов из архива"
            },
            "interface": "Archive_GetFileList_interface.js",
            "is_element": false,
            "name": "Archive_GetFileList",
            "select": "Archive_GetFileList_select.js",
            "template": "{{ArchivePath}} -> {{Save}}"
        }
    ],
    "api_version": 1,
    "autogenerated_functions": [
        "Archive_Unpack",
		"Archive_ArchiveFolder",
		"Archive_ArchiveFiles",
		"Archive_GetFileList"
    ],
    "browser": [
    ],
    "depends": [
    ],
    "description": "Working with archives",
    "description_small": {
        "en": "Archive",
        "ru": "Архив"
    },
    "developer_email": "sasha9817@mail.ru",
    "developer_name": "GhostZ",
    "developer_site": "https://t.me/GhostZed",
    "embeddeddata": [
        {
            "Data": "const fs = require('fs');\r\nconst path = require('path');\r\nconst unzipper = require(\"unzipper\");\r\nconst il = require('iconv-lite');\r\n\r\nvar archive_path = [[ARCHIVE_UNPACK_PARAMETERS]][0];\r\nvar destination_path = [[ARCHIVE_UNPACK_PARAMETERS]][1];\r\nvar list_of_files = [[ARCHIVE_UNPACK_PARAMETERS]][2];\r\nvar unpack_all = list_of_files.length<=0;\r\n\r\nfunction ensureDirectoryExistence(filePath) {\r\n    var dirname = path.dirname(filePath);\r\n    if(fs.existsSync(dirname)){\r\n        return true;\r\n    };\r\n    ensureDirectoryExistence(dirname);\r\n    fs.mkdirSync(dirname);\r\n};\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var readStream = fs.createReadStream(archive_path);\r\n    readStream.on(\"error\", function error(e) {\r\n        reject(e);\r\n    });\r\n    var parse = readStream.pipe(unzipper.Parse());\r\n    parse.on('entry', function (entry){\r\n        var isUnicode = entry.props.flags.isUnicode;\r\n        var filePath = isUnicode ? entry.path : il.decode(entry.props.pathBuffer, 'cp866');\r\n        var fullPath = destination_path + '/' + filePath;\r\n        var fileType = entry.type;\r\n        if(unpack_all || list_of_files.indexOf(filePath) > -1){\r\n            if(fileType===\"File\"){\r\n                ensureDirectoryExistence(fullPath);\r\n                var writeStream = entry.pipe(fs.createWriteStream(fullPath));\r\n                writeStream.on(\"error\", function error(e) {\r\n                    reject(e);\r\n                });\r\n            }else{\r\n                fs.mkdirSync(fullPath);\r\n                var autodrain = entry.autodrain();\r\n                autodrain.on(\"error\", function error(e) {\r\n                    reject(e);\r\n                });\r\n            }\r\n        }else{\r\n            var autodrain = entry.autodrain();\r\n            autodrain.on(\"error\", function error(e) {\r\n                reject(e);\r\n            });\r\n        };\r\n    });\r\n    parse.on(\"error\", function error(e) {\r\n        reject(e);\r\n    });\r\n    parse.on(\"close\", function close() {\r\n        resolve();\r\n    });\r\n}));",
            "DataName": "Unpack",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const fs = require('fs');\r\nconst archiver = require('archiver');\r\n\r\nvar folder_path = [[ARCHIVE_FOLDER_PARAMETERS]][0];\r\nvar destination_path = [[ARCHIVE_FOLDER_PARAMETERS]][1];\r\nvar folder_name = [[ARCHIVE_FOLDER_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var archive = archiver('zip').directory(folder_path, folder_name);\r\n    var writeStream = archive.pipe(fs.createWriteStream(destination_path));\r\n    archive.finalize();\r\n    archive.on('error', function(e){\r\n        reject(e);\r\n    });\r\n    writeStream.on('error', function(e){\r\n        reject(e);\r\n    });\r\n    writeStream.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));\r\n",
            "DataName": "ArchiveFolder",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
		{
            "Data": "const fs = require('fs');\r\nconst archiver = require('archiver');\r\n\r\nvar list_of_files = [[ARCHIVE_FILES_PARAMETERS]][0];\r\nvar destination_path = [[ARCHIVE_FILES_PARAMETERS]][1];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var archive = archiver('zip');\r\n    list_of_files.forEach(function(e){\r\n        if(e.isFolder){\r\n            archive.directory(e.path, e.name);\r\n        }else{\r\n            archive.file(e.path, {name: e.name});\r\n        }\r\n    });\r\n    var writeStream = archive.pipe(fs.createWriteStream(destination_path));\r\n    archive.finalize();\r\n    archive.on('error', function(e){\r\n        reject(e);\r\n    });\r\n    writeStream.on('error', function(e){\r\n        reject(e);\r\n    });\r\n    writeStream.on('close', function close(){\r\n        resolve();\r\n    });\r\n}));\r\n",
            "DataName": "ArchiveFiles",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
		{
            "Data": "const unzipper = require(\"unzipper\");\r\nconst fs = require('fs');\r\nconst il = require('iconv-lite');\r\n\r\nvar archive_path = [[ARCHIVE_GETFILELIST_PARAMETERS]];\r\nvar list_of_files = [];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    var readStream = fs.createReadStream(archive_path);\r\n    readStream.on(\"error\", function error(e) {\r\n        reject(e);\r\n    });\r\n    var parse = readStream.pipe(unzipper.Parse());\r\n    parse.on('entry', function (entry){\r\n        var isUnicode = entry.props.flags.isUnicode;\r\n        var filePath = isUnicode ? entry.path : il.decode(entry.props.pathBuffer, 'cp866');\r\n        list_of_files.push(filePath);\r\n        var autodrain = entry.autodrain();\r\n        autodrain.on(\"error\", function error(e) {\r\n            reject(e);\r\n        });\r\n    });\r\n    parse.on(\"error\", function error(e) {\r\n        reject(e);\r\n    });\r\n    parse.on(\"close\", function close() {\r\n        [[ARCHIVE_GETFILELIST_PARAMETERS]] = list_of_files;\r\n        resolve();\r\n    });\r\n}));",
            "DataName": "GetFileList",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        }
    ],
    "engine": [
        "engine.js"
    ],
    "icon": "Archive.png",
    "info": {
        "en": "Module for working with archives",
        "ru": "Модуль для работы с архивами"
    },
    "is_autogenerated": true,
    "languages": [
        {
            "Name": "Node",
            "Version": "8.6.0"
        }
    ],
    "localize": {
		"File": {"ru":"Файл"},
		"is empty": {"ru":"пуст"},
		"Archive type": {"ru":"Тип архива"},
		"Folder path": {"ru":"Путь к папке"},
		"Archive path": {"ru":"Путь к архиву"},
		"List of files": {"ru":"Список файлов"},
		"Can be blank": {"ru":"Может быть пустым"},
		"Destination path": {"ru":"Путь назначения"},
		"in the destination path": {"ru":"в пути назначения"},
		"The place in which a folder": {"ru":"Место в котором находится папка"},
		"The place in which the archive": {"ru":"Место в котором находится архив"},
		"The archive will be completely unpacked": {"ru":"Архив будет распакован полностью"},
		"The path to the file which needs to archive.": {"ru":"Путь к файлу который нужно заархивировать."},
		"This action only works with zip archives.": {"ru":"Данное действие работает только с zip архивами."},
		"Get a list of files contained in the archive.": {"ru":"Получить список файлов содержащихся в архиве."},
		"The path to the archive which needs to be unpacked.": {"ru":"Путь к архиву который нужно распаковать."},
		"The path to the folder which needs to be archived.": {"ru":"Путь к папке которую нужно заархивировать."},
		"The path to the location where the archive will be saved.": {"ru":"Путь к месту в которое будет сохранен архив."},
		"A list of paths to the files which needs to archive.": {"ru":"Список путей к файлам которые нужно заархивировать."},
		"The archive type will be determined by the file extension": {"ru":"Тип архива будет определен по расширению файла"},
		"Unpack the contents of the archive to the specified location.": {"ru":"Распаковать содержимое архива в указанное место."},
		"Archive files and save the archive to the specified location.": {"ru":"Заархивировать файлы и сохранить архив в указанное место."},
		"Archive folder and save the archive to the specified location.": {"ru":"Заархивировать папку и сохранить архив в указанное место."},
		"This action can archive not only files, but also folders.": {"ru":"Данное действие может архивировать не только файлы, но и папки."},
		"The path to the archive from which needs to get the list of files.": {"ru":"Путь к архиву из которого нужно получить список файлов."},
		"The resulting list can be used in the \"Unpack archive\" action.": {"ru":"Полученный список можно использовать в действии \"Распаковать архив\"."},
		"The path to the location where the contents of the archive will be unpacked.": {"ru":"Путь к месту в которое будет распаковано содержимое архива."},
		"The list of files can be obtained using the \"Get file list from archive\" action.": {"ru":"Список файлов можно получить с помощь действия \"Получить список файлов из архива\"."},
		"Files from separate fields and the list are added to a general list of files that will be archived.": {"ru":"Файлы из отдельных полей и списка складываются в общий список файлов которые будут заархивированы."},
		"For example, if a file is specified in the \"File 1\" field and a list of 4 files is specified in the \"List of files\" field, then 5 files will be archived.": {"ru":"Например если в поле \"Файл 1\" указан файл и в поле \"Список файлов\" указан список из 4 файлов, то заархивировано будет 5 файлов."},
		"If the destination path is not specified, the archive will be unpacked to the location where it is located.": {"ru":"Если путь назначения не указан, архив будет распаковать в то место в котором он находится."},
		"If the destination path is not specified, the archive will be saved to the location where the folder is located.": {"ru":"Если путь назначения не указан, архив будет сохранен в то место в котором находится папка."},
		"Variable in which, after successful completion of the action, will be recorded list of files contained in the archive.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан список файлов содержащихся в архиве."},
		"This action can unpack not the entire archive, but only a part of it, for this you need to specify a list of files that need to be unpacked.": {"ru":"Данное действие может распаковывать не весь архив, а только его часть, для этого нужно указать список файлов которые нужно распоковать."},
		"The archive type is usually written in the file extension. But there are exceptions, such as Chrome extensions files have the extension .crx, but are zip archive with additional headers.": {"ru":"Тип архива обычно пишется в расширении файла. Но бывают и исключения, например файлы расширений Chrome имеют расширение .crx, но являются zip архивом с дополнительными заголовками."},
		"List of files to extract from the archive. The list of files can be obtained using the \"Get file list from archive\" action. If this parameter is not specified, the archive will be completely unpacked.": {"ru":"Список файлов которые нужно извлечь из архива. Список файлов можно получить с помощь действия \"Получить список файлов из архива\". Если данный параметр не указан архив будет распокован полностью."}
    },
    "major_version": 1,
    "minor_version": 0,
    "modules": [
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "unzipper",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "iconv-lite",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "archiver",
            "ModuleVersion": "4.0.2"
        }
    ],
    "name": "Archive"
}