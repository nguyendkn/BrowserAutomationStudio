{
    "actions": [
		{
            "code": [
                {
                    "file": "Excel_GetSheetsList_code.js",
                    "name": "Excel_GetSheetsList_code"
                }
            ],
            "description": {
                "en": "Get sheets list",
                "ru": "Получить список листов"
            },
            "interface": "Excel_GetSheetsList_interface.js",
            "is_element": false,
            "name": "Excel_GetSheetsList",
            "select": "Excel_GetSheetsList_select.js",
            "template": "{{FilePath}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "Excel_AddSheet_code.js",
                    "name": "Excel_AddSheet_code"
                }
            ],
            "description": {
                "en": "Add sheet",
                "ru": "Добавить лист"
            },
            "interface": "Excel_AddSheet_interface.js",
            "is_element": false,
            "name": "Excel_AddSheet",
            "select": "Excel_AddSheet_select.js",
            "template": "{{SheetName}} -> {{FilePath}}"
        },
        {
            "code": [
                {
                    "file": "Excel_RenameSheet_code.js",
                    "name": "Excel_RenameSheet_code"
                }
            ],
            "description": {
                "en": "Rename sheet",
                "ru": "Переименовать лист"
            },
            "interface": "Excel_RenameSheet_interface.js",
            "is_element": false,
            "name": "Excel_RenameSheet",
            "select": "Excel_RenameSheet_select.js",
            "template": "{{SheetIndexOrName}} -> {{NewSheetName}}"
        },
		{
            "code": [
                {
                    "file": "Excel_MoveSheet_code.js",
                    "name": "Excel_MoveSheet_code"
                }
            ],
            "description": {
                "en": "Move sheet",
                "ru": "Переместить лист"
            },
            "interface": "Excel_MoveSheet_interface.js",
            "is_element": false,
            "name": "Excel_MoveSheet",
            "select": "Excel_MoveSheet_select.js",
            "template": "{{SheetIndexOrName}} -> {{NewSheetIndex}}"
        },
		{
            "code": [
                {
                    "file": "Excel_DeleteSheet_code.js",
                    "name": "Excel_DeleteSheet_code"
                }
            ],
            "description": {
                "en": "Delete sheet",
                "ru": "Удалить лист"
            },
            "interface": "Excel_DeleteSheet_interface.js",
            "is_element": false,
            "name": "Excel_DeleteSheet",
            "select": "Excel_DeleteSheet_select.js",
            "template": "{{SheetIndexOrName}}"
        },
        {
            "code": [
                {
                    "file": "Excel_ReadCell_code.js",
                    "name": "Excel_ReadCell_code"
                }
            ],
            "description": {
                "en": "Read cell",
                "ru": "Читать ячейку"
            },
            "interface": "Excel_ReadCell_interface.js",
            "is_element": false,
            "name": "Excel_ReadCell",
            "select": "Excel_ReadCell_select.js",
            "template": "{{CellAddress}} -> {{Save}}"
        },
		{
            "code": [
                {
                    "file": "Excel_WriteToCell_code.js",
                    "name": "Excel_WriteToCell_code"
                }
            ],
            "description": {
                "en": "Write to cell",
                "ru": "Запись в ячейку"
            },
            "interface": "Excel_WriteToCell_interface.js",
            "is_element": false,
            "name": "Excel_WriteToCell",
            "select": "Excel_WriteToCell_select.js",
            "template": "{{Data}} -> {{CellAddress}}"
        }
    ],
    "api_version": 1,
    "autogenerated_functions": [
        "Excel_GetSheetsList",
        "Excel_AddSheet",
        "Excel_RenameSheet",
		"Excel_MoveSheet",
        "Excel_DeleteSheet",
        "Excel_ReadCell",
        "Excel_WriteToCell"
    ],
    "browser": [
    ],
    "depends": [
    ],
    "description": "Working with excel files",
    "description_small": {
        "en": "Excel",
        "ru": "Excel"
    },
    "developer_email": "sasha9817@mail.ru",
    "developer_name": "GhostZ",
    "developer_site": "https://t.me/GhostZed",
    "embeddeddata": [
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    var sheets = workbook.sheets();\r\n                    [[XLSX_NODE_PARAMETERS]] = sheets.map(function(sheet){return sheet.name()});\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                return resolve();\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelGetSheetsList",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar sheet_index = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        var file = exist ? xlsx.fromFileAsync(file_path) : xlsx.fromBlankAsync();\r\n        file.then(function(workbook){\r\n            try{\r\n                sheet_index===\"\" ? workbook.addSheet(sheet_name) : workbook.addSheet(sheet_name, sheet_index);\r\n            }catch(err){\r\n                reject(err);\r\n            };\r\n            \r\n            var toFile = workbook.toFileAsync(file_path);\r\n            toFile.then(function(){\r\n                return resolve();\r\n            });\r\n            toFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        });\r\n        file.catch(function(err){\r\n            return reject(err);\r\n        });\r\n    });\r\n}));",
            "DataName": "ExcelAddSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar new_sheet_name = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    workbook.sheet(sheet_index_or_name).name(new_sheet_name);\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                var toFile = workbook.toFileAsync(file_path);\r\n                toFile.then(function(){\r\n                    return resolve();\r\n                });\r\n                toFile.catch(function(err){\r\n                    return reject(err);\r\n                });\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelRenameSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar new_sheet_index = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    new_sheet_index===\"\" ? workbook.moveSheet(sheet_index_or_name) : workbook.moveSheet(sheet_index_or_name, new_sheet_index);\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                var toFile = workbook.toFileAsync(file_path);\r\n                toFile.then(function(){\r\n                    return resolve();\r\n                });\r\n                toFile.catch(function(err){\r\n                    return reject(err);\r\n                });\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelMoveSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    workbook.sheet(sheet_index_or_name) ? workbook.sheet(sheet_index_or_name).delete() : resolve();\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                var toFile = workbook.toFileAsync(file_path);\r\n                toFile.then(function(){\r\n                    return resolve();\r\n                });\r\n                toFile.catch(function(err){\r\n                    return reject(err);\r\n                });\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            resolve();\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelDeleteSheet",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst RichText = require('xlsx-Populate').RichText;\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar cell_address = [[XLSX_NODE_PARAMETERS]][2];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        if(exist){\r\n            var fromFile = xlsx.fromFileAsync(file_path);\r\n            fromFile.then(function(workbook){\r\n                try{\r\n                    var value = workbook.sheet(sheet_index_or_name).cell(cell_address).value();\r\n                    [[XLSX_NODE_PARAMETERS]] = value instanceof RichText ? value.text() : value;\r\n                }catch(err){\r\n                    reject(err);\r\n                };\r\n                \r\n                return resolve();\r\n            });\r\n            fromFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        }else{\r\n            reject('The file \"' + file_path + '\" does not exist');\r\n        };\r\n    });\r\n}));",
            "DataName": "ExcelReadCell",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        },
        {
            "Data": "const xlsx = require('xlsx-populate');\r\nconst fs = require('fs');\r\nvar file_path = [[XLSX_NODE_PARAMETERS]][0];\r\nvar sheet_index_or_name = [[XLSX_NODE_PARAMETERS]][1];\r\nvar cell_address = [[XLSX_NODE_PARAMETERS]][2];\r\nvar data = [[XLSX_NODE_PARAMETERS]][3];\r\n\r\nawait (new Promise((resolve, reject) => {\r\n    fs.exists(file_path, function(exist){\r\n        var file = exist ? xlsx.fromFileAsync(file_path) : xlsx.fromBlankAsync();\r\n        file.then(function(workbook){\r\n            try{\r\n                workbook.sheet(sheet_index_or_name).cell(cell_address).value(data);\r\n            }catch(err){\r\n                reject(err);\r\n            };\r\n            \r\n            var toFile = workbook.toFileAsync(file_path);\r\n            toFile.then(function(){\r\n                return resolve();\r\n            });\r\n            toFile.catch(function(err){\r\n                return reject(err);\r\n            });\r\n        });\r\n        file.catch(function(err){\r\n            return reject(err);\r\n        });\r\n    });\r\n}));",
            "DataName": "ExcelWriteToCell",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0"
        }
    ],
    "engine": [
        "engine.js"
    ],
    "icon": "Excel.png",
    "info": {
        "en": "Module for working with excel files.",
        "ru": "Модуль для работы с excel файлами."
    },
    "is_autogenerated": true,
    "languages": [
        {
            "Name": "Node",
            "Version": "8.6.0"
        }
    ],
    "localize": {
		"Numbеr": {"ru":"Число"},
		"Sheet1": {"ru":"Лист1"},
		"Sheet2": {"ru":"Лист2"},
		"Analog": {"ru":"Аналог"},
		"String": {"ru":"Строка"},
		"is empty": {"ru":"пуст"},
		"New Sheet": {"ru":"Новый лист"},
		"Sheet name": {"ru":"Имя листа"},
		"File path": {"ru":"Путь к файлу"},
		"Sheet index": {"ru":"Индекс листа"},
		"Cell address": {"ru":"Адрес ячейки"},
		"Can be blank": {"ru":"Может быть пустым"},
		"New sheet name": {"ru":"Новое имя листа"},
		"New sheet index": {"ru":"Новый индекс листа"},
		"First sheet name": {"ru":"Имя первого листа"},
		"Second sheet name": {"ru":"Имя второго листа"},
		"First sheet index": {"ru":"Индекс первого листа"},
		"Second sheet index": {"ru":"Индекс второго листа"},
		"Sheet index or name": {"ru":"Индекс или имя листа"},
		"The name of new sheet.": {"ru":"Имя нового листа."},
		"The index of new sheet.": {"ru":"Индекс нового листа."},
		"First column, first row": {"ru":"Первая колонка, первая строка"},
		"Second column, second row": {"ru":"Вторая колонка, вторая строка"},
		"Add new sheet to excel file.": {"ru":"Добавить новый лист в excel файл."},
		"Variable to save the result": {"ru":"Переменная, в которую сохранить результат"},
		"Index or sheet name in excel file.": {"ru":"Индекс или имя листа в excel файле."},
		"The sheet will have the specified index": {"ru":"Лист будет иметь указанный индекс"},
		"Get list of sheets from excel file.": {"ru":"Получить список листов из excel файла."},
		"Move specified sheet in excel file.": {"ru":"Переместить указанный лист в excel файле."},
		"Write data to a cell in an excel file.": {"ru":"Записать данные в ячейку в excel файле."},
		"Delete specified sheet from excel file.": {"ru":"Удалить указанный лист из excel файла."},
		"The sheet will be added to the end of the book": {"ru":"Лист будет добавлен в конец книги"},
		"The sheet will be moved to the end of the book": {"ru":"Лист будет перемещен в конец книги"},
		"Rename the specified sheet in excel file.": {"ru":"Переименовать указанный лист в excel файле."},
		"The sheet will be added before the specified sheet": {"ru":"Лист будет добавлен перед указанным листом"},
		"The sheet will be placed in before the specified sheet": {"ru":"Лист будет помещен перед указанным листом"},
		"The path to the excel file which needs to add the sheet.": {"ru":"Путь к excel файлу в который нужно добавить лист."},
		"If the file or sheet is missing, no error will occur.": {"ru":"Если файл или лист отсутствуют, ошибки не произойдет."},
		"The data which needs to be written to the specified cell.": {"ru":"Данные которые нужно записать в указанную ячейку."},
		"The name of the sheet after successful completion of the action.": {"ru":"Имя листа после успешного выполнения действия."},
		"The path to the excel file in which needs to move the sheet.": {"ru":"Путь к excel файлу в котором нужно переместить лист."},
		"The path to the excel file from which needs to delete the sheet.": {"ru":"Путь к excel файлу из которого нужно удалить лист."},
		"The index of the sheet after successful completion of the action.": {"ru":"Индекс листа после успешного выполнения действия."},
		"The path to the excel file from which needs to read the cell.": {"ru":"Путь к excel файлу из которого нужно прочитать ячейку."},
		"The path to the excel file in which needs to rename the sheet.": {"ru":"Путь к excel файлу в котором нужно переименовать лист."},
		"The path to the excel file where in the cell needs to write the data.": {"ru":"Путь к excel файлу в ячейку которого нужно записать данные."},
		"The path to the excel file from which needs to get the list of sheets.": {"ru":"Путь к excel файлу из которого нужно получить список листов."},
		"Read a cell from an excel file and save its contents to a variable.": {"ru":"Читать ячейку из excel файла и сохранить её содержимое в переменную."},
		"The resulting list can be processed using actions from the \"List\" module.": {"ru":"Полученный список можно обработать с помощью действий из модуля \"Список\"."},
		"If the \"Sheet index\" parameter is empty, the sheet will be added to the end of the book.": {"ru":"Если параметр \"Индекс листа\" пуст, лист будет добавлен в конец книги."},
		"If the \"New sheet index\" parameter is empty, the sheet will be moved to the end of the book.": {"ru":"Если параметр \"Новый индекс листа\" пуст, лист будет перемещен в конец книги."},
		"Variable in which, after successful execution of the action, the list of sheets will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан список листов."},
		"Variable in which, after successful execution of the action, the contents of the cell will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записано содержимое ячейки."},
		"In the \"Sheet index\" parameter, you can specify the name of an existing sheet, then a new sheet will be added before it.": {"ru":"В параметр \"Индекс листа\" можно указать имя уже существующего листа, тогда новый лист будет добавлен перед ним."},
		"In the \"New sheet index\" parameter, you can specify the name of an existing sheet, then the specified sheet will be placed in front of it.": {"ru":"В параметр \"Новый индекс листа\" можно указать имя существующего листа, тогда указанный лист будет помещен перед ним."},
		"Cell address in excel file. You can specify a standard address with a column letter and row number, or the column number and row number separated by *.": {"ru":"Адрес ячейки в excel файле. Можно указать стандартный адрес с буквой колонки и номером строки, или номер колонки и номер строки через разделитель *."},
		"If an error occurred while execute action, the thread will stop with fail message. If you want to continue thread, use \"Ignore errors\" action.":{"ru":"Если во время выполнения действия произойдет ошибка, поток остановится с сообщением об ошибке. Если вы хотите продолжить работу, используйте действие \"Игнорировать ошибки\"."}
    },
    "major_version": 1,
    "minor_version": 0,
    "modules": [
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "xlsx-populate",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "xlsx",
            "ModuleVersion": "*"
        },
        {
            "LanguageName": "Node",
            "LanguageVersion": "8.6.0",
            "ModuleName": "exceljs",
            "ModuleVersion": "*"
        }
    ],
    "name": "Excel"
}
