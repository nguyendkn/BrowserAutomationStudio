{
    "actions": [
		{
            "code": [
                {
                    "file": "InMail_Configure_code.js",
                    "name": "InMail_Configure_code"
                }
            ],
            "description": {
                "en": "Configure receiving mail",
                "ru": "Настроить получение почты"
            },
            "interface": "InMail_Configure_interface.js",
            "is_element": false,
            "name": "InMail_Configure",
            "select": "InMail_Configure_select.js",
            "template": "{{protocol}}://{{username}}:{{password}}"
        },
		{
            "code": [
                {
                    "file": "InMail_Proxy_code.js",
                    "name": "InMail_Proxy_code"
                }
            ],
            "description": {
                "en": "Proxy receiving mail",
                "ru": "Прокси получения почты"
            },
            "interface": "InMail_Proxy_interface.js",
            "is_element": false,
            "name": "InMail_Proxy",
            "select": "InMail_Proxy_select.js",
            "template": "{{proxyString}}"
        },
		{
            "code": [
                {
                    "file": "InMail_SearchLast_code.js",
                    "name": "InMail_SearchLast_code"
                }
            ],
            "description": {
                "en": "Find id of the last mail",
                "ru": "Найти id последнего письма"
            },
            "interface": "InMail_SearchLast_interface.js",
            "is_element": false,
            "name": "InMail_SearchLast",
            "select": "InMail_SearchLast_select.js",
            "template": "{{Save}}"
        },
		{
            "code": [
                {
                    "file": "InMail_SearchOne_code.js",
                    "name": "InMail_SearchOne_code"
                }
            ],
            "description": {
                "en": "Find id of one mail by criteria",
                "ru": "Найти id одного письма по критериям"
            },
            "interface": "InMail_SearchOne_interface.js",
            "is_element": false,
            "name": "InMail_SearchOne",
            "select": "InMail_SearchOne_select.js",
            "template": "{{Save}}"
        },
		{
            "code": [
                {
                    "file": "InMail_Search_code.js",
                    "name": "InMail_Search_code"
                }
            ],
            "description": {
                "en": "Find id of multiple mails",
                "ru": "Найти id нескольких писем"
            },
            "interface": "InMail_Search_interface.js",
            "is_element": false,
            "name": "InMail_Search",
            "select": "InMail_Search_select.js",
            "template": "{{Save}}"
        },
		{
            "code": [
                {
                    "file": "InMail_AddBox_code.js",
                    "name": "InMail_AddBox_code"
                }
            ],
            "description": {
                "en": "Create new folder",
                "ru": "Создать новую папку"
            },
            "interface": "InMail_AddBox_interface.js",
            "is_element": false,
            "name": "InMail_AddBox",
            "select": "InMail_AddBox_select.js",
            "template": "{{name}}"
        },
		{
            "code": [
                {
                    "file": "InMail_RenameBox_code.js",
                    "name": "InMail_RenameBox_code"
                }
            ],
            "description": {
                "en": "Rename folder",
                "ru": "Переименовать папку"
            },
            "interface": "InMail_RenameBox_interface.js",
            "is_element": false,
            "name": "InMail_RenameBox",
            "select": "InMail_RenameBox_select.js",
            "template": "{{oldName}} -> {{newName}}"
        },
		{
            "code": [
                {
                    "file": "InMail_DelBox_code.js",
                    "name": "InMail_DelBox_code"
                }
            ],
            "description": {
                "en": "Delete folder",
                "ru": "Удалить папку"
            },
            "interface": "InMail_DelBox_interface.js",
            "is_element": false,
            "name": "InMail_DelBox",
            "select": "InMail_DelBox_select.js",
            "template": "{{name}}"
        }
	],
    "api_version": 1,
    "browser": [
    ],
    "depends": [
    ],
    "description": "Module for working with incoming mail",
    "description_small": {
        "en": "Mail",
        "ru": "Почта"
    },
    "developer_email": "sasha9817@mail.ru",
    "developer_name": "GhostZ",
    "developer_site": "https://t.me/GhostZed",
    "embeddeddata": [
        {
            "Data": "const Imap = require('imap');\nconst { format } = require('util');\nconst { Buffer } = require('buffer');\nconst { createHash } = require('crypto');\nconst { once, EventEmitter } = require('events');\n\nclass ImapClient extends EventEmitter {\n    constructor(id, { config, folder='INBOX' }){\n        super();\n        this.locked = true;\n        this.id = id;\n        this.config = config;\n        this.folder = folder;\n        this.timeout = 0;\n        \n        let opts = {\n            user: config.username,\n            password: config.password,\n            host: config.host,\n            port: config.port\n        };\n\n        if(['ssl', 'tls'].includes(config.encrypt)){\n            opts.tls = true;\n            opts.tlsOptions = {\n                servername: config.host\n            };\n        }else if(config.encrypt === 'starttls'){\n            opts.tls = false;\n            opts.autotls = 'always';\n        };\n\n        this.imap = new Imap(opts);\n    }\n\n    static async init(opts){\n        let { config, folder='INBOX' } = opts;\n        let id = createHash('md5').update(`${config.host}@${config.username}:${config.password}`).digest('hex');\n\n        if(typeof _imap_connections!=\"undefined\" && typeof _imap_connections[id]!=\"undefined\" && _imap_connections[id].locked){\n            await once(_imap_connections[id], 'unlock');\n\n            return await this.init(opts);\n        };\n        \n        if(typeof _imap_connections==\"undefined\" || typeof _imap_connections[id]==\"undefined\" || JSON.stringify(_imap_connections[id].config)!=JSON.stringify(config)){\n\n            if(typeof _imap_connections==\"undefined\"){\n                global._imap_connections = {};\n            };\n            \n            _imap_connections[id] = new this(id, opts);\n\n            await _imap_connections[id].connect();\n        }else{\n\n            _imap_connections[id].clearTimeout();\n            \n            if(typeof _imap_connections==\"undefined\" || typeof _imap_connections[id]==\"undefined\"){\n                return await this.init(opts);\n            };\n\n            _imap_connections[id].setFolder(folder);\n        };\n\n        return _imap_connections[id];\n    }\n\n    lock = () => {\n        this.locked = true;\n        this.emit('lock');\n    }\n\n    unlock = () => {\n        this.locked = false;\n        this.emit('unlock');\n    }\n\n    del = () => {\n        if(typeof _imap_connections!=\"undefined\" && typeof _imap_connections[this.id]!=\"undefined\"){\n            return delete _imap_connections[this.id];\n        };\n\n        return true;\n    }\n\n    close = () => {\n        this.clearTimeout();\n        this.imap.removeListener('close', this.close);\n        if(this.imap.state && this.imap.state !== 'disconnected'){\n            try{\n                this.imap.end();\n            }catch(_){}\n        };\n        this.unlock();\n        return this.del();\n    }\n\n    setTimeout = (timeout=300000) => {\n        this.clearTimeout();\n        this.timeout = setTimeout(this.close, timeout);\n    }\n    \n    clearTimeout = () => {\n        if(this.timeout && !this.timeout[\"_destroyed\"]){\n            clearTimeout(this.timeout);\n        };\n    }\n\n    connect = async () => {\n        return new Promise((resolve, reject) => {\n            let imapOnReady = () => {\n                this.imap.removeListener('error', imapOnError);\n                this.imap.removeListener('close', imapOnClose);\n                this.imap.removeListener('end', imapOnEnd);\n                this.imap.once('close', this.close);\n                this.unlock();\n                resolve(this);\n            }\n            \n            let imapOnError = (err) => {\n                this.imap.removeListener('ready', imapOnReady);\n                this.imap.removeListener('close', imapOnClose);\n                this.imap.removeListener('end', imapOnEnd);\n                this.close();\n                reject(err);\n            }\n            \n            let imapOnEnd = () => {\n                this.imap.removeListener('ready', imapOnReady);\n                this.imap.removeListener('error', imapOnError);\n                this.imap.removeListener('close', imapOnClose);\n                this.close();\n                reject(new Error('Connection ended unexpectedly'));\n            }\n            \n            let imapOnClose = () => {\n                this.imap.removeListener('ready', imapOnReady);\n                this.imap.removeListener('error', imapOnError);\n                this.imap.removeListener('end', imapOnEnd);\n                this.close();\n                reject(new Error('Connection closed unexpectedly'));\n            }\n            \n            this.imap.once('ready', imapOnReady);\n            this.imap.once('error', imapOnError);\n            this.imap.once('close', imapOnClose);\n            this.imap.once('end', imapOnEnd);\n            \n            this.imap.connect();\n        });\n    }\n\n    setFolder = (folder) => {\n        if(this.folder !== folder){\n            this.folder = folder;\n        };\n    }\n\n    openBox = async (name=this.folder, readOnly=false) => {\n        if(this.imap._box && this.imap._box.name === name){\n            return this.imap._box;\n        }else{\n            return new Promise((resolve, reject) => {\n                this.imap.openBox(name, readOnly, function(err, box){\n                    if(err){\n                        reject(err);\n                    }else{\n                        resolve(box);\n                    };\n                });\n            });\n        };\n    }\n\n    closeBox = async (autoExpunge=true) => {\n        if(typeof this._box === 'undefined'){\n            return;\n        }else{\n            return new Promise((resolve, reject) => {\n                this.imap.closeBox(autoExpunge, function(err){\n                    if(err){\n                        reject(err);\n                    }else{\n                        resolve();\n                    };\n                });\n            });\n        };\n    }\n\n    addBox = async (name) => {\n        return new Promise((resolve, reject) => {\n            this.imap.addBox(name, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    delBox = async (name) => {\n        return new Promise((resolve, reject) => {\n            this.imap.delBox(name, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    renameBox = async (oldname, newname) => {\n        return new Promise((resolve, reject) => {\n            this.imap.renameBox(oldname, newname, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    status = async (name=this.folder) => {\n        if(this.imap._box && this.imap._box.name === name){\n            await this.closeBox(false);\n        };\n\n        return new Promise((resolve, reject) => {\n            this.imap.status(name, function(err, box){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve(box);\n                };\n            });\n        });\n    }\n\n    getBoxes = async (namespace) => {\n        return new Promise((resolve, reject) => {\n            this.imap.getBoxes(namespace, function(err, boxes){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve(boxes);\n                };\n            });\n        });\n    }\n\n    expunge = async (uids) => {\n        return new Promise((resolve, reject) => {\n            this.imap.expunge(uids, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    search = async (criteria) => {\n        return new Promise((resolve, reject) => {\n            this.imap.search(criteria, function(err, uids){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve(uids);\n                };\n            });\n        });\n    }\n\n    sort = async (sorts, criteria) => {\n        return new Promise((resolve, reject) => {\n            this.imap.sort(sorts, criteria, function(err, uids){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve(uids);\n                };\n            });\n        });\n    }\n\n    addFlags = async (uids, flags) => {\n        return new Promise((resolve, reject) => {\n            this.imap.addFlags(uids, flags, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    delFlags = async (uids, flags) => {\n        return new Promise((resolve, reject) => {\n            this.imap.delFlags(uids, flags, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    setFlags = async (uids, flags) => {\n        return new Promise((resolve, reject) => {\n            this.imap.setFlags(uids, flags, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    addKeywords = async (uids, keywords) => {\n        return new Promise((resolve, reject) => {\n            this.imap.addKeywords(uids, keywords, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    delKeywords = async (uids, keywords) => {\n        return new Promise((resolve, reject) => {\n            this.imap.delKeywords(uids, keywords, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    setKeywords = async (uids, keywords) => {\n        return new Promise((resolve, reject) => {\n            this.imap.setKeywords(uids, keywords, function(err){\n                if(err){\n                    reject(err);\n                }else{\n                    resolve();\n                };\n            });\n        });\n    }\n\n    serverSupports = (cap) => {\n        return this.imap.serverSupports(cap);\n    }\n}\n\nmodule.exports = ImapClient;",
            "DataName": "InMail_ImapClient",
            "DataType": 1,
            "LanguageName": "Node",
            "LanguageVersion": "12.18.3"
        },
        {
            "Data": "const ImapClient = require(\"../InMail_ImapClient\");\r\n\r\nlet { options, criteria, folder, timeout } = [[INMAIL_NODE_PARAMETERS]];\r\n\r\nlet client = await ImapClient.init(options);\r\ntry{\r\n    \r\n    let box = await client.openBox(folder);\r\n    \r\n    [[INMAIL_NODE_PARAMETERS]] = await client.search(criteria);\r\n}catch(err){\r\n    client.setTimeout(timeout);\r\n    throw err;\r\n};",
            "DataName": "InMail_Search",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "12.18.3"
        },
        {
            "Data": "const ImapClient = require(\"../InMail_ImapClient\");\r\n\r\nlet { options, sorts, criteria, folder, timeout } = [[INMAIL_NODE_PARAMETERS]];\r\n\r\nlet client = await ImapClient.init(options);\r\ntry{\r\n    \r\n    let box = await client.openBox(folder);\r\n    \r\n    [[INMAIL_NODE_PARAMETERS]] = await client.sort(sorts, criteria);\r\n}catch(err){\r\n    client.setTimeout(timeout);\r\n    throw err;\r\n};",
            "DataName": "InMail_Sort",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "12.18.3"
        },
        {
            "Data": "const ImapClient = require(\"../InMail_ImapClient\");\r\n\r\nlet { options, name, timeout } = [[INMAIL_NODE_PARAMETERS]];\r\n\r\nlet client = await ImapClient.init(options);\r\ntry{\r\n    await client.addBox(name);\r\n}catch(err){\r\n    client.setTimeout(timeout);\r\n    throw err;\r\n};",
            "DataName": "InMail_AddBox",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "12.18.3"
        },
        {
            "Data": "const ImapClient = require(\"../InMail_ImapClient\");\r\n\r\nlet { options, name, timeout } = [[INMAIL_NODE_PARAMETERS]];\r\n\r\nlet client = await ImapClient.init(options);\r\ntry{\r\n    await client.delBox(name);\r\n}catch(err){\r\n    client.setTimeout(timeout);\r\n    throw err;\r\n};",
            "DataName": "InMail_DelBox",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "12.18.3"
        },
        {
            "Data": "const ImapClient = require(\"../InMail_ImapClient\");\r\n\r\nlet { options, oldName, newName, timeout } = [[INMAIL_NODE_PARAMETERS]];\r\n\r\nlet client = await ImapClient.init(options);\r\ntry{\r\n    await client.renameBox(oldName, newName);\r\n}catch(err){\r\n    client.setTimeout(timeout);\r\n    throw err;\r\n};",
            "DataName": "InMail_RenameBox",
            "DataType": 0,
            "LanguageName": "Node",
            "LanguageVersion": "12.18.3"
        }
    ],
    "engine": [
        "engine.js",
        "internal/base.js",
        "internal/configs.js",
        "internal/imapCurl.js"
	],
    "icon": "mail.png",
    "info": {
        "en": "Module for working with incoming mail",
        "ru": "Модуль для работы с входящей почтой"
    },
    "is_autogenerated": true,
    "languages": [
        {
            "Name": "Node",
            "Version": "12.18.3"
        }
    ],
    "localize": {
		"Timeout": {"ru":"Таймаут"},
		"Protocol": {"ru":"Протокол"},
		"Host name": {"ru":"Имя хоста"},
		"Folder name": {"ru":"Имя папки"},
		"Timeout (seconds)": {"ru":"Таймаут (секунд)"},
		"Auto configuration": {"ru":"Автоматическая настройка"},
		"Without using encryption": {"ru":"Без использования шифрования"},
		"Default port for imap protocol with SSL encryption": {"ru":"Порт по умолчанию для протокола imap с SSL шифрованием"},
		"Default port for pop3 protocol with SSL encryption": {"ru":"Порт по умолчанию для протокола pop3 с SSL шифрованием"},
		"Configure access to the mail server to read email.": {"ru":"Настроить доступ к почтовому серверу для чтения электронной почты."},
		"Automatically detect port based on protocol and encryption type": {"ru":"Автоматическое определение порта на основе протокола и типа шифрования"},
		"Default port for imap protocol without encryption or with STARTTLS encryption": {"ru":"Порт по умолчанию для протокола imap без шифрования или с STARTTLS шифрованием"},
		"Default port for pop3 protocol without encryption or with STARTTLS encryption": {"ru":"Порт по умолчанию для протокола pop3 без шифрования или с STARTTLS шифрованием"},
		"This action won't start connection, it only sets configuration. Connection will be established after first attempt to access server. When action, which triggers connection will be finished, connection won't be closed immediately. It will be preserved for a time specified in this parameter. If another action will require access to server, connection will be reused.": {"ru":"Это действие не устанавливает соединение сразу. Соединение будет установлено только после первой попытки доступа к серверу. Когда действие, запускающее соединение, будет завершено, соединение не будет закрыто. Оно будет храниться в течение времени, указанного в этом параметре. Если другое действие снова потребует доступа к серверу, соединение будет повторно использовано."},
		
		"By default mail client works without proxy, this action sets proxy for mail client.": {"ru":"По умолчанию почтовый клиент работает без прокси, это действие устанавливает его."},
		
		"Error if mail not found": {"ru":"Ошибка, если письмо не найдено"},
		"Find and save the id of the last mail in the specified folder.": {"ru":"Найти и сохранить id последнего письма в указанной папке."},
		"Variable in which, after successful execution of the action, the id of the last mail will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан id последнего письма."},
		
		"To date": {"ru":"До даты"},
		"Contains": {"ru":"Содержит"},
		"From date": {"ru":"От даты"},
		"Sorting": {"ru":"Сортировка"},
		"Filtration": {"ru":"Фильтрация"},
		"Letter flags": {"ru":"Флаги письма"},
		"Letter size": {"ru":"Размер письма"},
		"Letter subject": {"ru":"Тема письма"},
		"Text of letter": {"ru":"Текст письма"},
		"Does not contain": {"ru":"Не содержит"},
		"Sorting field": {"ru":"Поле сортировки"},
		"Receiving date": {"ru":"Дата получения"},
		"Sender of letter": {"ru":"Отправитель письма"},
		"Field for sorting": {"ru":"Поле для сортировки"},
		"Recipient of letter": {"ru":"Получатель письма"},
		"sort alphabetically": {"ru":"сортировка по алфавиту"},
		"Do not filter by missing flags": {"ru":"Не фильтровать по отсутствию флагов"},
		"Do not filter by the presence of flags": {"ru":"Не фильтровать по наличию флагов"},
		"List of flags that the letter should contain.": {"ru":"Список флагов, которые должно содержать письмо."},
		"List of flags that the letter should not contain.": {"ru":"Список флагов, которые не должно содержать письмо."},
		"Find and save the mail id by the specified criteria.": {"ru":"Найти и сохранить id письма по указанным критериям."},
		"As a list, you can use a string consisting of column names, separated by commas.": {"ru":"В качестве списка можно использовать строку, состоящую из имен полей, разделенных запятыми."},
		"Variable in which, after successful execution of the action, the id of the found mail will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан id найденнго письма."},
		"Using the parameters from this block, you can filter the results as you need, or leave them without filtering.": {"ru":"Используя параметры из этого блока, вы можете отфильтровать результаты по своему усмотрению или оставить их без фильтрации."},
		"Using the parameters from this block, you can sort the results in the order you need, or leave them without sorting.": {"ru":"Используя параметры из этого блока, вы можете отсортировать результаты в нужном вам порядке или оставить их без сортировки."},
		
		"Find and save the mails id by the specified criteria.": {"ru":"Найти и сохранить id писем по указанным критериям."},
		"Variable in which, after successful execution of the action, the list of id of the found mails will be written.": {"ru":"Переменная в которую, после успешного выполнения действия, будет записан список id найденных писем."},
		
		"Creates a new mailbox on the server.": {"ru":"Создает новый почтовый ящик на сервере."},
		
		"New folder name": {"ru":"Новое имя папки"},
		"Old folder name": {"ru":"Старое имя папки"},
		"Renames the specified mailbox that exists on the server.": {"ru":"Переименовывает указанный почтовый ящик, существующий на сервере."},
		
		"Deletes the specified mailbox that exists on the server.": {"ru":"Удаляет указанный почтовый ящик, существующий на сервере."}
    },
    "major_version": 1,
    "minor_version": 0,
    "modules": [
        {
            "LanguageName": "Node",
            "LanguageVersion": "12.18.3",
            "ModuleName": "imap",
            "ModuleVersion": "*"
        }
    ],
    "name": "InMail"
}
